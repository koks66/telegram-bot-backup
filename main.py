import os
import requests
import tempfile
# test update for Git push
from flask import Flask, request
import telebot
from telebot import types as tg_types
from google import genai
import json
import asyncio
import websockets
from concurrent.futures import ThreadPoolExecutor
import threading
from apscheduler.schedulers.background import BackgroundScheduler
import atexit
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º non-GUI –±—ç–∫–µ–Ω–¥
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.patches import Rectangle
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io
from pytz import timezone
import io

app = Flask(__name__)

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ Replit ---
TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_ID = os.environ.get("TELEGRAM_ADMIN_ID")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
if not ADMIN_ID:
    raise ValueError("‚ùå TELEGRAM_ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")
if not GEMINI_API_KEY:
    raise ValueError("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")

import os

WEBHOOK_URL = f"https://{os.environ.get('REPLIT_DEV_DOMAIN')}"

bot = telebot.TeleBot(TOKEN)
gemini_client = genai.Client(api_key=GEMINI_API_KEY)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫ TradingView ---
def parse_tradingview_link(link):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ —Å—Å—ã–ª–∫–∏ TradingView"""
    try:
        import re
        print(f"üîó –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É TradingView: {link}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π (/x/)
        if '/x/' in link:
            print("üìé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ TradingView")
            return "SHORT_LINK", "1h"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª
        symbol_match = re.search(r'[?&]symbol=([^&]+)', link)
        if symbol_match:
            symbol_encoded = symbol_match.group(1)
            print(f"üîç –ù–∞–π–¥–µ–Ω –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol_encoded}")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL encoding (%3A = :, %2F = /)
            import urllib.parse
            symbol_decoded = urllib.parse.unquote(symbol_encoded)
            print(f"üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol_decoded}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (BINANCE:BTCUSDT -> BTCUSDT)
            if ':' in symbol_decoded:
                full_symbol = symbol_decoded.split(':')[-1]
                print(f"üîç –°–∏–º–≤–æ–ª –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ ':': {full_symbol}")
            else:
                full_symbol = symbol_decoded
                print(f"üîç –°–∏–º–≤–æ–ª –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: {full_symbol}")
                
            # –£–±–∏—Ä–∞–µ–º .P (Perpetual –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã) –∏–∑ TradingView —Å–∏–º–≤–æ–ª–æ–≤
            if full_symbol.endswith('.P'):
                full_symbol = full_symbol[:-2]  # BTCUSDT.P -> BTCUSDT
                print(f"üîç –£–±—Ä–∞–ª–∏ .P (Perpetual): {full_symbol}")
            
            # –£–±–∏—Ä–∞–µ–º USDT/USD —Å—É—Ñ—Ñ–∏–∫—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            if full_symbol.endswith('USDT'):
                base_symbol = full_symbol[:-4]  # BTCUSDT -> BTC
                print(f"üîç –ë–∞–∑–æ–≤—ã–π —Å–∏–º–≤–æ–ª (—É–±—Ä–∞–ª–∏ USDT): {base_symbol}")
            elif full_symbol.endswith('USD'):
                base_symbol = full_symbol[:-3]   # BTCUSD -> BTC
                print(f"üîç –ë–∞–∑–æ–≤—ã–π —Å–∏–º–≤–æ–ª (—É–±—Ä–∞–ª–∏ USD): {base_symbol}")
            else:
                base_symbol = full_symbol
                print(f"üîç –ë–∞–∑–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): {base_symbol}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤–∞–ª–∏–¥–Ω—ã–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 10)
            if len(base_symbol) < 2 or len(base_symbol) > 10:
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞: {base_symbol} ({len(base_symbol)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return None, None
                
        else:
            print("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∏–º–≤–æ–ª –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å—Å—ã–ª–∫–∏
            # –ò—â–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Å–∞–º–æ–π —Å—Å—ã–ª–∫–µ
            crypto_patterns = [
                r'\b(BTC|BITCOIN)\b',
                r'\b(ETH|ETHEREUM)\b', 
                r'\b(SOL|SOLANA)\b',
                r'\b(ADA|CARDANO)\b',
                r'\b(XRP|RIPPLE)\b',
                r'\b(DOGE|DOGECOIN)\b',
                r'\b(MATIC|POLYGON)\b',
                r'\b(AVAX|AVALANCHE)\b',
            ]
            
            for pattern in crypto_patterns:
                match = re.search(pattern, link.upper())
                if match:
                    base_symbol = match.group(1)
                    if base_symbol in ['BITCOIN']:
                        base_symbol = 'BTC'
                    elif base_symbol in ['ETHEREUM']:
                        base_symbol = 'ETH'
                    elif base_symbol in ['SOLANA']:
                        base_symbol = 'SOL'
                    elif base_symbol in ['CARDANO']:
                        base_symbol = 'ADA'
                    elif base_symbol in ['RIPPLE']:
                        base_symbol = 'XRP'
                    elif base_symbol in ['DOGECOIN']:
                        base_symbol = 'DOGE'
                    elif base_symbol in ['POLYGON']:
                        base_symbol = 'MATIC'
                    elif base_symbol in ['AVALANCHE']:
                        base_symbol = 'AVAX'
                    print(f"üîç –°–∏–º–≤–æ–ª –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∏: {base_symbol}")
                    break
            else:
                print("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ –≤ —Å—Å—ã–ª–∫–µ")
                return None, None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
        interval_match = re.search(r'[?&]interval=([^&]+)', link)
        if interval_match:
            interval = interval_match.group(1)
            # TradingView —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 1, 5, 15, 30, 60, 240, 1D, 1W, 1M
            timeframe_map = {
                '1': '1m', '5': '5m', '15': '15m', '30': '30m', 
                '60': '1h', '240': '4h', '1D': '1d', '1W': '1w', '1M': '1M'
            }
            timeframe = timeframe_map.get(interval, interval)
        else:
            timeframe = '1h'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
            
        print(f"üîó –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ —Å—Å—ã–ª–∫—É TradingView: {base_symbol}, {timeframe}")
        return base_symbol, timeframe
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Å—ã–ª–∫–∏ TradingView: {e}")
        return None, None

def analyze_symbol_from_tradingview(symbol, timeframe, original_text, tradingview_link):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ —Å—Å—ã–ª–∫–∏ TradingView –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Binance
        chart_analysis = None
        data_source = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–º–≤–æ–ª–∞ –¥–ª—è Binance
        # 1. –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∂–µ BTCUSDT)
        if any(symbol.upper().endswith(suffix) for suffix in ['USDT', 'USD', 'BTC', 'ETH']):
            # –°–∏–º–≤–æ–ª —É–∂–µ –ø–æ–ª–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            try:
                print(f"üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∏–∑ Binance (–ø–æ–ª–Ω—ã–π —Å–∏–º–≤–æ–ª)...")
                data = get_coin_klines(symbol, timeframe, 100)
                if data is not None and len(data) > 10:
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
                    levels = calculate_technical_levels(data)
                    if levels:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
                        chart_buffer = create_trading_chart(symbol, data, levels, timeframe)
                        if chart_buffer:
                            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                            chart_analysis = generate_chart_analysis(symbol, levels, "", timeframe)
                            data_source = "Binance"
                            working_symbol = symbol
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–º–µ—Å—Ç–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
                            return chart_analysis, chart_buffer
                        else:
                            # Fallback: –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
                            chart_analysis = create_simple_chart_analysis(symbol, timeframe, data)
                            data_source = "Binance"
                            working_symbol = symbol
                    else:
                        # Fallback: –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
                        chart_analysis = create_simple_chart_analysis(symbol, timeframe, data)
                        data_source = "Binance"
                        working_symbol = symbol
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            except:
                # –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–º–≤–æ–ª —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
                if symbol.upper().endswith('USDT'):
                    base_symbol = symbol[:-4]  # BTCUSDT -> BTC
                elif symbol.upper().endswith('USD'):
                    base_symbol = symbol[:-3]   # BTCUSD -> BTC
                else:
                    base_symbol = symbol
                    
                print(f"üîç –ü–æ–ª–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π: {base_symbol}")
                for suffix in ['USDT', 'USD', 'BTC', 'ETH']:
                    test_symbol = f"{base_symbol}{suffix}"
                    try:
                        print(f"üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {test_symbol} –∏–∑ Binance...")
                        data = get_coin_klines(test_symbol, timeframe, 100)
                        if data is not None and len(data) > 10:
                            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
                            levels = calculate_technical_levels(data)
                            if levels:
                                chart_buffer = create_trading_chart(test_symbol, data, levels, timeframe)
                                if chart_buffer:
                                    chart_analysis = generate_chart_analysis(test_symbol, levels, "", timeframe)
                                    data_source = "Binance"
                                    working_symbol = test_symbol
                                    return chart_analysis, chart_buffer
                                else:
                                    chart_analysis = create_simple_chart_analysis(test_symbol, timeframe, data)
                                    data_source = "Binance"
                                    working_symbol = test_symbol
                            else:
                                chart_analysis = create_simple_chart_analysis(test_symbol, timeframe, data)
                                data_source = "Binance"
                                working_symbol = test_symbol
                            break
                    except:
                        continue
        else:
            # 2. –°–∏–º–≤–æ–ª –±–∞–∑–æ–≤—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC) - –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã
            for suffix in ['USDT', 'USD', 'BTC', 'ETH']:
                test_symbol = f"{symbol}{suffix}"
                try:
                    print(f"üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {test_symbol} –∏–∑ Binance...")
                    data = get_coin_klines(test_symbol, timeframe, 100)
                    if data is not None and len(data) > 10:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
                        levels = calculate_technical_levels(data)
                        if levels:
                            chart_buffer = create_trading_chart(test_symbol, data, levels, timeframe)
                            if chart_buffer:
                                chart_analysis = generate_chart_analysis(test_symbol, levels, "", timeframe)
                                data_source = "Binance"
                                working_symbol = test_symbol
                                return chart_analysis, chart_buffer
                            else:
                                chart_analysis = create_simple_chart_analysis(test_symbol, timeframe, data)
                                data_source = "Binance"
                                working_symbol = test_symbol
                        else:
                            chart_analysis = create_simple_chart_analysis(test_symbol, timeframe, data)
                            data_source = "Binance"
                            working_symbol = test_symbol
                        break
                except:
                    continue
        
        # –ï—Å–ª–∏ Binance –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º CoinGecko
        if not chart_analysis:
            try:
                print(f"üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∏–∑ CoinGecko...")
                cg_data = get_coin_data_coingecko(symbol, days=1)
                if cg_data:
                    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ CoinGecko –¥–∞–Ω–Ω—ã—Ö
                    price = cg_data.get('current_price', 0)
                    change_24h = cg_data.get('price_change_percentage_24h', 0)
                    volume = cg_data.get('total_volume', 0)
                    market_cap = cg_data.get('market_cap', 0)
                    
                    chart_analysis = f"""üìä **–ê–ù–ê–õ–ò–ó {symbol.upper()}** (–ø–æ –¥–∞–Ω–Ω—ã–º CoinGecko)

üí∞ **–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${price:,.2f}
üìà **–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:** {change_24h:+.2f}%  
üìä **–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤:** ${volume:,.0f}
üíé **–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:** ${market_cap:,.0f}

üîó **–ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏:** TradingView ({timeframe})  
üìã **–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {original_text[:100]}{'...' if len(original_text) > 100 else ''}

‚ö†Ô∏è *–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ CoinGecko, —Ç–∞–∫ –∫–∞–∫ —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Binance*"""
                    data_source = "CoinGecko"
                    working_symbol = symbol
            except Exception as e:
                print(f"‚ùå CoinGecko —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        if not chart_analysis:
            chart_analysis = f"""‚ùå **–ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–£–ß–ò–¢–¨ –î–ê–ù–ù–´–ï**

üîó **–°—Å—ã–ª–∫–∞ TradingView:** {tradingview_link}
ü™ô **–°–∏–º–≤–æ–ª:** {symbol}
‚è∞ **–¢–∞–π–º—Ñ—Ä–µ–π–º:** {timeframe}

üìã **–ü—Ä–æ–±–ª–µ–º–∞:** –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Binance, –Ω–∏ –≤ CoinGecko API.

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
            return chart_analysis
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
        chart_analysis += f"\n\nüåê **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** {data_source}"
        chart_analysis += f"\nüîó **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:** {tradingview_link[:100]}{'...' if len(tradingview_link) > 100 else ''}"
        
        return chart_analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ –∏–∑ TradingView: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

def create_simple_chart_analysis(symbol, timeframe, data):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        if data is None or len(data) < 5:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_price = float(data.iloc[-1]['close'])
        high_price = float(data['high'].max())
        low_price = float(data['low'].min())
        volume = float(data.iloc[-1]['volume'])
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        price_change = ((current_price - float(data.iloc[-2]['close'])) / float(data.iloc[-2]['close'])) * 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
        recent_highs = data['high'].tail(5).mean()
        recent_lows = data['low'].tail(5).mean()
        
        if current_price > recent_highs * 0.98:
            trend = "–í–æ—Å—Ö–æ–¥—è—â–∏–π"
            trend_emoji = "üìà"
        elif current_price < recent_lows * 1.02:
            trend = "–ù–∏—Å—Ö–æ–¥—è—â–∏–π" 
            trend_emoji = "üìâ"
        else:
            trend = "–ë–æ–∫–æ–≤–æ–π"
            trend_emoji = "‚ÜîÔ∏è"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        support = float(data['low'].tail(10).min())
        resistance = float(data['high'].tail(10).max())
        
        analysis = f"""üìä **–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó {symbol.upper()}**

üí∞ **–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${current_price:,.2f}
üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {price_change:+.2f}%
{trend_emoji} **–¢—Ä–µ–Ω–¥:** {trend}

üìà **–ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–∏–æ–¥–∞:** ${high_price:,.2f}
üìâ **–ú–∏–Ω–∏–º—É–º –ø–µ—Ä–∏–æ–¥–∞:** ${low_price:,.2f}
üîµ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** ${support:,.2f}
üî¥ **–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ:** ${resistance:,.2f}

üìä **–û–±—ä–µ–º:** {volume:,.0f}
‚è∞ **–¢–∞–π–º—Ñ—Ä–µ–π–º:** {timeframe}

üí° **–ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–±–æ–π –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
‚Ä¢ –û–±—ä–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∏—Å–∫–∞–º–∏"""

        return analysis
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def notify_admin_about_user_request(user_id, username, first_name, request_type, request_text):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if str(user_id) == str(ADMIN_ID):
            return
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if len(request_text) > 100:
            request_text = request_text[:100] + "..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Markdown
        user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        if username:
            user_info += f" (@{username})"
        user_info += f"\nüÜî ID: {user_id}"
        
        time_info = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        admin_message = f"""üìä –ù–û–í–´–ô –ó–ê–ü–†–û–° –í –ë–û–¢–ï

{user_info}
‚è∞ –í—Ä–µ–º—è: {time_info}
üîß –¢–∏–ø: {request_type}
üí¨ –ó–∞–ø—Ä–æ—Å: {request_text}

---"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        bot.send_message(int(ADMIN_ID), admin_message)
        
    except Exception as e:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            simple_msg = f"üìä –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {request_type}"
            bot.send_message(int(ADMIN_ID), simple_msg)
        except:
            pass
        print(f"‚ö† –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


# --- –ö—ç—à –¥–ª—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –º–æ–Ω–µ—Ç ---
import time
coins_cache = {"data": [], "timestamp": 0}
COINS_CACHE_TTL = 30  # 30 —Å–µ–∫—É–Ω–¥ (—É–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—ã–π —Å–∫–∞–ª—å–ø–∏–Ω–≥)



# --- BINANCE API –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ö–†–ò–ù–ò–ù–ì–ê –ú–û–ù–ï–¢ ---

def get_binance_24hr_ticker():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º —Å Binance –∑–∞ 24 —á–∞—Å–∞"""
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Binance API –æ—à–∏–±–∫–∞: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Binance: {e}")
        return []

def get_binance_klines(symbol, interval="5m", limit=20):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            klines = response.json()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            processed_klines = []
            for kline in klines:
                processed_klines.append({
                    'open_time': kline[0],
                    'open': float(kline[1]),
                    'high': float(kline[2]),
                    'low': float(kline[3]),
                    'close': float(kline[4]),
                    'volume': float(kline[5]),
                    'close_time': kline[6],
                    'quote_volume': float(kline[7])
                })
            return processed_klines
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è klines –¥–ª—è {symbol}: {e}")
        return []

def get_mexc_klines(symbol, interval='1h', limit=100):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å MEXC API –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ Binance"""
    try:
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Å–∏–º–≤–æ–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        symbol = f"{symbol}USDT" if not symbol.endswith('USDT') else symbol
        
        # MEXC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç API —á—Ç–æ –∏ Binance
        url = f"https://api.mexc.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        
        headers = {
            'User-Agent': 'TradingBot/4.0',
            'Accept': 'application/json'
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code == 200:
            klines = response.json()
            
            if not klines or len(klines) < 10:
                print(f"‚ö†Ô∏è MEXC: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (–ø–æ–ª—É—á–µ–Ω–æ: {len(klines) if klines else 0})")
                return None
                
            # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ—á–Ω–æ –∫–∞–∫ –¥–ª—è Binance API
            df_data = []
            for kline in klines:
                df_data.append({
                    'open_time': int(kline[0]),
                    'open': float(kline[1]),
                    'high': float(kline[2]),
                    'low': float(kline[3]),
                    'close': float(kline[4]),
                    'volume': float(kline[5]),
                    'close_time': int(kline[6]),
                    'quote_volume': float(kline[7]) if len(kline) > 7 else float(kline[5])
                })
            
            df = pd.DataFrame(df_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
            df['timestamp'] = pd.to_datetime(df['open_time'], unit='ms')
            
            print(f"‚úÖ MEXC: –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {df['timestamp'].iloc[0]} - {df['timestamp'].iloc[-1]}")
            return df
            
        else:
            print(f"‚ùå MEXC API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {response.status_code}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MEXC API –¥–ª—è {symbol}: {e}")
        import traceback
        print(f"   –¢—Ä–µ–π—Å: {traceback.format_exc()}")
        return None

def calculate_real_scalping_score(ticker, klines_5m):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
    try:
        if not klines_5m or len(klines_5m) < 10:
            return 0
            
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        volume = float(ticker['volume'])
        quote_volume = float(ticker['quoteVolume'])
        
        if volume < 1000000 or quote_volume < 10000000:
            return 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
        recent_candles = klines_5m[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –º–∏–Ω—É—Ç
        
        # 1. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 5–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
        price_ranges = [(candle['high'] - candle['low']) / candle['close'] for candle in recent_candles]
        avg_volatility = sum(price_ranges) * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        # 2. –û–±—ä–µ–º–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–≤–µ—á–∞–º–∏)
        recent_volumes = [candle['volume'] for candle in recent_candles]
        avg_volume = sum(recent_volumes) / len(recent_volumes)
        volume_spike = (recent_volumes[-1] / avg_volume) if avg_volume > 0 else 1
        
        # 3. –î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
        price_momentum = abs((recent_candles[-1]['close'] - recent_candles[-5]['close']) / recent_candles[-5]['close']) * 100
        
        # 4. –°–ø—Ä–µ–¥ –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –æ–±—ä–µ–º)
        liquidity_score = min(quote_volume / 20000000, 5) * 20  # –î–æ 100 –±–∞–ª–ª–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        if avg_volatility < 0.5:  # –ú–∏–Ω–∏–º—É–º 0.5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 5–º
            return 0
        if price_momentum < 0.3:  # –ú–∏–Ω–∏–º—É–º 0.3% –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ 25 –º–∏–Ω—É—Ç
            return 0
            
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∫–æ—Ä–∞ (0-100)
        volatility_score = min(avg_volatility * 15, 30)  # –î–æ 30 –±–∞–ª–ª–æ–≤
        momentum_score = min(price_momentum * 10, 25)    # –î–æ 25 –±–∞–ª–ª–æ–≤  
        volume_score = min(volume_spike * 20, 25)        # –î–æ 25 –±–∞–ª–ª–æ–≤
        
        total_score = volatility_score + momentum_score + volume_score + liquidity_score
        
        return min(round(total_score, 2), 100)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞: {e}")
        return 0

def calculate_scalping_score(ticker):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–æ–Ω–µ—Ç—ã"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        volume = float(ticker['volume'])
        price_change = abs(float(ticker['priceChangePercent']))
        quote_volume = float(ticker['quoteVolume'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if volume < 1000000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
            return 0
        if quote_volume < 10000000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USDT
            return 0
        if price_change < 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2%
            return 0
            
        # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ (0-100)
        volume_score = min(volume / 10000000, 10) * 10  # –î–æ 100 –±–∞–ª–ª–æ–≤ –∑–∞ –æ–±—ä–µ–º
        volatility_score = min(price_change, 10) * 10   # –î–æ 100 –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        liquidity_score = min(quote_volume / 50000000, 10) * 10  # –î–æ 100 –±–∞–ª–ª–æ–≤ –∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä
        total_score = (volume_score + volatility_score + liquidity_score) / 3
        
        return round(total_score, 2)
    except:
        return 0

def screen_best_coins_for_scalping():
    """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –†–ï–ê–õ–¨–ù–û–ì–û —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if time.time() - coins_cache["timestamp"] < COINS_CACHE_TTL and coins_cache["data"]:
            return coins_cache["data"]
        
        print("üîç –°–∫–∞–Ω–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ (5–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance
        tickers = get_binance_24hr_ticker()
        if not tickers:
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ)
        usdt_pairs = [ticker for ticker in tickers if ticker['symbol'].endswith('USDT')]
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ —Ç–æ–∫–µ–Ω—ã —Å –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
        excluded = ['USDT', 'BUSD', 'FDUSD', 'TUSD', 'USDC']
        filtered_pairs = []
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –º–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤)
        high_volume_pairs = []
        for ticker in usdt_pairs:
            symbol = ticker['symbol'].replace('USDT', '')
            if symbol not in excluded:
                volume = float(ticker['volume'])
                quote_volume = float(ticker['quoteVolume'])
                if volume > 2000000 and quote_volume > 15000000:  # –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                    high_volume_pairs.append(ticker)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø-30 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        high_volume_pairs.sort(key=lambda x: float(x['quoteVolume']), reverse=True)
        top_volume_pairs = high_volume_pairs[:30]
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(top_volume_pairs)} –≤—ã—Å–æ–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä...")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å 5-–º–∏–Ω—É—Ç–Ω—ã–º–∏ —Å–≤–µ—á–∞–º–∏
        for ticker in top_volume_pairs:
            try:
                symbol = ticker['symbol']
                klines_5m = get_binance_klines(symbol, "5m", 20)
                
                if klines_5m:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞
                    score = calculate_real_scalping_score(ticker, klines_5m)
                    if score > 40:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                        ticker['scalping_score'] = score
                        ticker['klines_5m'] = klines_5m  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                        filtered_pairs.append(ticker)
                        print(f"‚úÖ {symbol}: —Å–∫–æ—Ä {score}")
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞
                time.sleep(0.05)
                
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {ticker['symbol']}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É
        top_coins = sorted(filtered_pairs, key=lambda x: x['scalping_score'], reverse=True)[:10]
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(top_coins)} –º–æ–Ω–µ—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        coins_cache["data"] = top_coins
        coins_cache["timestamp"] = time.time()
        
        return top_coins
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞: {e}")
        return []

def generate_scalping_signal(coin_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
    try:
        symbol = coin_data['symbol']
        current_price = float(coin_data['lastPrice'])
        price_change = float(coin_data['priceChangePercent'])
        high_24h = float(coin_data['highPrice'])
        low_24h = float(coin_data['lowPrice'])
        volume = float(coin_data['volume'])
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        if price_change > 0:
            # –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
            entry = current_price * 1.001  # –í—Ö–æ–¥ —á—É—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            stop_loss = current_price * 0.992  # –°—Ç–æ–ø 0.8%
            take_profit_1 = current_price * 1.015  # –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å 1.5%
            take_profit_2 = current_price * 1.025  # –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å 2.5%
            signal_type = "üü¢ LONG"
        else:
            # –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
            entry = current_price * 0.999  # –í—Ö–æ–¥ —á—É—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            stop_loss = current_price * 1.008  # –°—Ç–æ–ø 0.8%
            take_profit_1 = current_price * 0.985  # –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å 1.5%
            take_profit_2 = current_price * 0.975  # –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å 2.5%
            signal_type = "üî¥ SHORT"
        
        # –†–∞—Å—á–µ—Ç RRR (Risk-Reward Ratio)
        if price_change > 0:  # LONG
            rrr = (take_profit_1 - entry) / (entry - stop_loss)
        else:  # SHORT
            rrr = (entry - take_profit_1) / (stop_loss - entry)
        
        # –§–∏–ª—å—Ç—Ä: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å RRR < 1.5
        print(f"üîç {symbol}: RRR={rrr:.2f}, price_change={price_change}%")
        if rrr < 1.5:
            print(f"‚ùå {symbol}: RRR —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π ({rrr:.2f} < 1.5)")
            return None
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
        volatility = ((high_24h - low_24h) / current_price) * 100
        if volatility > 8:
            risk_level = "üî• –í—ã—Å–æ–∫–∏–π"
        elif volatility > 5:
            risk_level = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π"
        else:
            risk_level = "‚úÖ –ù–∏–∑–∫–∏–π"
        
        # –û—Ç–º–µ—Ç–∫–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_quality = "‚≠ê –õ–£–ß–®–ò–ô" if rrr > 2.5 else "‚úÖ –•–æ—Ä–æ—à–∏–π"
        
        return {
            'symbol': symbol.replace('USDT', ''),
            'signal_type': signal_type,
            'current_price': round(current_price, 8),
            'entry': round(entry, 8),
            'stop_loss': round(stop_loss, 8),
            'take_profit_1': round(take_profit_1, 8),
            'take_profit_2': round(take_profit_2, 8),
            'rrr': round(rrr, 2),
            'signal_quality': signal_quality,
            'risk_level': risk_level,
            'volatility': round(volatility, 2),
            'scalping_score': coin_data['scalping_score'],
            'volume_24h': f"{volume/1000000:.1f}M"
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return None

# --- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –î–õ–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–ê ---

def auto_send_scalping_signals():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""
    try:
        print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        top_coins = screen_best_coins_for_scalping()
        
        if not top_coins:
            print("üìä –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞")
            return
        
        # –ë–µ—Ä–µ–º –¢–û–ü-3 –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã
        top_3_coins = top_coins[:3]
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å RSI –∏ SMA –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        coins_data = []
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for i, coin in enumerate(top_3_coins):
            symbol = coin['symbol']
            signal = generate_scalping_signal(coin)
            
            if not signal:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º klines –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI –∏ SMA
            klines_data = get_binance_klines(symbol, "5m", 50)
            
            rsi = 50  # –î–µ—Ñ–æ–ª—Ç
            sma_20 = signal['current_price']  # –î–µ—Ñ–æ–ª—Ç
            
            if klines_data and len(klines_data) >= 20:
                closes = [k['close'] for k in klines_data]
                
                # –†–∞—Å—á–µ—Ç RSI
                def calc_rsi(prices, period=14):
                    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
                    gains = [d if d > 0 else 0 for d in deltas]
                    losses = [-d if d < 0 else 0 for d in deltas]
                    
                    avg_gain = sum(gains[:period]) / period
                    avg_loss = sum(losses[:period]) / period
                    
                    if avg_loss == 0:
                        return 100
                    
                    rs = avg_gain / avg_loss
                    return 100 - (100 / (1 + rs))
                
                rsi = calc_rsi(closes)
                sma_20 = sum(closes[-20:]) / 20 if len(closes) >= 20 else closes[-1]
            
            # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã RSI
            rsi_indicator = ""
            if rsi < 30:
                rsi_indicator = "üü¢"  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            elif rsi > 70:
                rsi_indicator = "üî¥"  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            
            # –≠–º–æ–¥–∑–∏ —Å–∏–≥–Ω–∞–ª–∞
            signal_emoji = "üü¢" if "LONG" in signal['signal_type'] else "üî¥"
            
            coins_data.append({
                'priority': medals[i],
                'symbol': signal['symbol'],
                'price': f"{signal['current_price']:.4f}" if signal['current_price'] < 1 else f"{signal['current_price']:.2f}",
                'signal_emoji': signal_emoji,
                'signal_type': signal['signal_type'],
                'rsi': f"{rsi:.0f} | {rsi_indicator}" if rsi_indicator else f"{rsi:.0f}",
                'sma_20': f"{sma_20:.4f}" if sma_20 < 1 else f"{sma_20:.2f}",
                'volume_24h': signal['volume_24h'],
                'rrr': signal['rrr'],
                'entry': f"{signal['entry']:.4f}" if signal['entry'] < 1 else f"{signal['entry']:.2f}",
                'stop_loss': f"{signal['stop_loss']:.4f}" if signal['stop_loss'] < 1 else f"{signal['stop_loss']:.2f}",
                'take_profit_1': f"{signal['take_profit_1']:.4f}" if signal['take_profit_1'] < 1 else f"{signal['take_profit_1']:.2f}",
                'star': '',
                'rsi_raw': rsi,
                'volume_raw': float(coin.get('quoteVolume', 0))
            })
        
        if not coins_data:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –º–æ–Ω–µ—Ç—É
        best_coin = None
        for coin in coins_data:
            if (coin['rsi_raw'] < 30 or coin['rsi_raw'] > 70) and coin['volume_raw'] > 10000000:
                coin['star'] = ' ‚≠ê'
                best_coin = coin['symbol']
                break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ª—É—á—à–µ–π —Å–¥–µ–ª–∫–∏
        if best_coin:
            response_text += f"üî• **–õ–£–ß–®–ê–Ø –°–î–ï–õ–ö–ê: {best_coin} ‚≠ê**\n\n"
        
        response_text += "üéØ **–¢–û–ü-3 –õ–£–ß–®–ò–ï –ú–û–ù–ï–¢–´ –î–õ–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–ê –°–ï–ô–ß–ê–°:**\n\n"
        
        # –¢–∞–±–ª–∏—Ü–∞ Markdown
        response_text += "| –†–∞–Ω–≥ | –ú–æ–Ω–µ—Ç–∞ | –¶–µ–Ω–∞ | –°–∏–≥–Ω–∞–ª | RSI | SMA20 | –û–±—ä—ë–º | RRR |\n"
        response_text += "|------|--------|------|--------|-----|-------|-------|-----|\n"
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for coin in coins_data:
            response_text += f"| {coin['priority']}{coin['star']} | {coin['symbol']} | ${coin['price']} | {coin['signal_emoji']} | {coin['rsi']} | ${coin['sma_20']} | {coin['volume_24h']}M | {coin['rrr']} |\n"
        
        response_text += "\n**üìä –î–ï–¢–ê–õ–ò –¢–û–†–ì–û–í–´–• –£–†–û–í–ù–ï–ô:**\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ
        for coin in coins_data:
            response_text += f"{coin['priority']}{coin['star']} **{coin['symbol']}** {coin['signal_type']}\n"
            response_text += f"üéØ –í—Ö–æ–¥: ${coin['entry']} | üõë –°—Ç–æ–ø: ${coin['stop_loss']} | ü•á –¶–µ–ª—å: ${coin['take_profit_1']}\n\n"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Gemini —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–ü-3 –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞—Å—Å—Ç–∞–≤—å –∏—Ö –ø–æ –º–µ—Å—Ç–∞–º:

–î–ê–ù–ù–´–ï:
"""
        for coin in coins_data:
            prompt += f"- {coin['symbol']}: RSI={coin['rsi_raw']:.0f}, SMA20=${coin['sma_20']}, –û–±—ä—ë–º={coin['volume_24h']}M, RRR={coin['rrr']}\n"
        
        prompt += f"""
–ó–ê–î–ê–ù–ò–ï:
1. –†–∞—Å—Å—Ç–∞–≤—å –º–æ–Ω–µ—Ç—ã ü•áü•àü•â –ø–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
2. –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1 —Å—Ç—Ä–æ–∫–∞)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ):
ü•á [–°–ò–ú–í–û–õ] - [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]
ü•à [–°–ò–ú–í–û–õ] - [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]
ü•â [–°–ò–ú–í–û–õ] - [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        def try_gemini_analysis_scan(prompt, max_retries=3):
            models_to_try = ["gemini-2.0-flash-exp", "gemini-1.5-flash", "gemini-1.5-pro"]
            delays = [2, 5, 9]
            
            for model in models_to_try:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}")
                for attempt in range(max_retries):
                    try:
                        response = gemini_client.models.generate_content(
                            model=model,
                            contents=prompt
                        )
                        print(f"‚úÖ Gemini —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª (–º–æ–¥–µ–ª—å: {model}, –ø–æ–ø—ã—Ç–∫–∞: {attempt + 1})")
                        return response
                    except Exception as e:
                        error_msg = str(e)
                        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini [–º–æ–¥–µ–ª—å: {model}, –ø–æ–ø—ã—Ç–∫–∞: {attempt + 1}/{max_retries}]: {error_msg}")
                        
                        if "503" in error_msg or "unavailable" in error_msg.lower() or "overloaded" in error_msg.lower():
                            if attempt < max_retries - 1:
                                delay = delays[attempt]
                                print(f"‚è∞ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                                time.sleep(delay)
                        else:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–æ–π, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å")
                            break
            
            print("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return None
        
        gemini_response = try_gemini_analysis_scan(prompt)
        ai_analysis = gemini_response.text if gemini_response and gemini_response.text else "AI –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –î–æ–±–∞–≤–ª—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        response_text += f"ü§ñ **GEMINI –ê–ù–ê–õ–ò–ó:**\n{ai_analysis}\n\n"
        
        # –ë–ª–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏ Gemini –≤—ã–±–æ—Ä–∞
        tech_top = coins_data[0]['symbol'] if coins_data else ""
        gemini_top = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä Gemini (–∏—â–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ ü•á)
        import re
        gemini_match = re.search(r'ü•á\s*([A-Z]+)', ai_analysis)
        if gemini_match:
            gemini_top = gemini_match.group(1)
        
        comparison_emoji = "üü¢" if tech_top == gemini_top else "üî¥"
        
        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è/—Ä–∞–∑–ª–∏—á–∏—è
        if tech_top == gemini_top:
            explanation = "–û–±–∞ –º–µ—Ç–æ–¥–∞ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É ‚Äî —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
        else:
            explanation = "–†–∞–∑–ª–∏—á–∏–µ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"
        
        response_text += f"**üìä –°–†–ê–í–ù–ï–ù–ò–ï –í–´–ë–û–†–û–í:**\n"
        response_text += f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {tech_top}\n"
        response_text += f"‚Ä¢ Gemini –≤—ã–±–æ—Ä: {gemini_top if gemini_top else 'N/A'}\n"
        response_text += f"‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {comparison_emoji} {'–î–∞' if tech_top == gemini_top else '–ù–µ—Ç'}\n"
        response_text += f"‚Ä¢ {explanation}\n\n"
        
        response_text += f"‚è∞ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {time.strftime('%H:%M:%S')}\n"
        response_text += f"üîÑ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ ‚ö°"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram
        max_length = 4000
        if len(response_text) > max_length:
            response_text = response_text[:max_length] + "..."
        
        bot.send_message(ADMIN_ID, response_text, parse_mode='Markdown')
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞: {e}")

def generate_enhanced_scalping_signal(coin_data):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ 5–º –¥–∞–Ω–Ω—ã—Ö"""
    try:
        symbol = coin_data['symbol']
        current_price = float(coin_data['lastPrice'])
        klines_5m = coin_data.get('klines_5m', [])
        
        if not klines_5m or len(klines_5m) < 5:
            # –§–æ–ª–ª–±–µ–∫ –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
            return generate_scalping_signal(coin_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
        recent_candles = klines_5m[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 25 –º–∏–Ω—É—Ç
        last_candle = recent_candles[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ 5–º —Å–≤–µ—á–µ–π
        trend_up = last_candle['close'] > recent_candles[0]['open']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR –¥–ª—è —Å—Ç–æ–ø–æ–≤ –∏ —Ü–µ–ª–µ–π
        true_ranges = []
        for i in range(1, len(recent_candles)):
            prev_close = recent_candles[i-1]['close']
            current = recent_candles[i]
            tr = max(
                current['high'] - current['low'],
                abs(current['high'] - prev_close),
                abs(current['low'] - prev_close)
            )
            true_ranges.append(tr)
        
        atr = sum(true_ranges) / len(true_ranges) if true_ranges else current_price * 0.01
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        if trend_up:
            # –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
            entry = current_price * 1.001  # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
            stop_loss = current_price - (atr * 1.5)
            take_profit_1 = current_price + (atr * 1.0)
            take_profit_2 = current_price + (atr * 2.0)
            signal_type = "üü¢ LONG"
        else:
            # –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
            entry = current_price * 0.999  # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
            stop_loss = current_price + (atr * 1.5)
            take_profit_1 = current_price - (atr * 1.0)
            take_profit_2 = current_price - (atr * 2.0)
            signal_type = "üî¥ SHORT"
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 5–º
        volatility_5m = (atr / current_price) * 100
        
        # –û–±—ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π 5–º —Å–≤–µ—á–∏
        volume_5m = last_candle['volume'] / 1000000  # –í –º–∏–ª–ª–∏–æ–Ω–∞—Ö
        
        # –†–∞—Å—á–µ—Ç RRR (Risk-Reward Ratio)
        if trend_up:  # LONG
            rrr = (take_profit_1 - entry) / (entry - stop_loss) if (entry - stop_loss) > 0 else 0
        else:  # SHORT
            rrr = (entry - take_profit_1) / (stop_loss - entry) if (stop_loss - entry) > 0 else 0
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä RRR - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ 5–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if volatility_5m > 2:
            risk_level = "üî• –í—ã—Å–æ–∫–∏–π"
        elif volatility_5m > 1:
            risk_level = "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π"
        else:
            risk_level = "‚úÖ –ù–∏–∑–∫–∏–π"
        
        # –û—Ç–º–µ—Ç–∫–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_quality = "‚≠ê –õ–£–ß–®–ò–ô" if rrr > 2.5 else "‚úÖ –•–æ—Ä–æ—à–∏–π"
        
        return {
            'symbol': symbol.replace('USDT', ''),
            'signal_type': signal_type,
            'current_price': round(current_price, 8),
            'entry': round(entry, 8),
            'stop_loss': round(max(stop_loss, 0), 8),
            'take_profit_1': round(take_profit_1, 8),
            'take_profit_2': round(take_profit_2, 8),
            'rrr': round(rrr, 2),
            'signal_quality': signal_quality,
            'risk_level': risk_level,
            'volatility_5m': round(volatility_5m, 2),
            'volume_5m': f"{volume_5m:.1f}M",
            'scalping_score': coin_data['scalping_score']
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        # –§–æ–ª–ª–±–µ–∫ –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
        return generate_scalping_signal(coin_data)

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ì–†–ê–§–ò–ö–û–í ---

def get_coin_klines(symbol, interval="1h", limit=100):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ USDT –≤ —Å–∏–º–≤–æ–ª–µ
        if not symbol.endswith('USDT'):
            symbol = symbol.upper() + 'USDT'
        
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            klines = response.json()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            df = pd.DataFrame(data=klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_base', 'taker_buy_quote', 'ignore'
            ])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            numeric_cols = ['open', 'high', 'low', 'close', 'volume', 'quote_volume']
            df[numeric_cols] = df[numeric_cols].astype(float)
            
            return df
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è klines –¥–ª—è {symbol}: {e}")
        return None

def calculate_pivot_points(df, window=5):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–≤–æ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫ (swing highs/lows)"""
    highs = []
    lows = []
    
    for i in range(window, len(df) - window):
        # High pivot: –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
        if all(df.iloc[i]['high'] >= df.iloc[j]['high'] for j in range(i-window, i+window+1)):
            highs.append((i, df.iloc[i]['high']))
        
        # Low pivot: –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º  
        if all(df.iloc[i]['low'] <= df.iloc[j]['low'] for j in range(i-window, i+window+1)):
            lows.append((i, df.iloc[i]['low']))
    
    return highs[-10:], lows[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∏–≤–æ—Ç–æ–≤

def calculate_technical_levels(df):
    """–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö"""
    try:
        # –ì–∏–±–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        min_data_points = 20  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if df is None or len(df) < min_data_points:
            return None
        
        current_price = df['close'].iloc[-1]
        
        # === –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (–∫–∞–∫ —É—á–∞—Ç –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ) ===
        
        # 1. –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (EMA) - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        data_length = len(df)
        ema_20_span = min(20, max(5, data_length // 3))  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è EMA20
        ema_50_span = min(50, max(10, data_length // 2))  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è EMA50
        ema_200_span = min(200, max(20, data_length - 5))  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è EMA200
        
        df['ema_20'] = df['close'].ewm(span=ema_20_span, adjust=False).mean()
        df['ema_50'] = df['close'].ewm(span=ema_50_span, adjust=False).mean() if data_length >= 10 else df['ema_20']
        df['ema_200'] = df['close'].ewm(span=ema_200_span, adjust=False).mean() if data_length >= 20 else df['ema_50']
        
        ema_20 = df['ema_20'].iloc[-1]
        ema_50 = df['ema_50'].iloc[-1] 
        ema_200 = df['ema_200'].iloc[-1]
        
        # 2. ATR –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (True Range)
        df['tr'] = np.maximum(
            df['high'] - df['low'],
            np.maximum(
                abs(df['high'] - df['close'].shift(1)),
                abs(df['low'] - df['close'].shift(1))
            )
        )
        atr = df['tr'].ewm(span=14, adjust=False).mean().iloc[-1]  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π ATR
        atr_pct = (atr / current_price) * 100  # ATR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        # 3. RSI –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏  
        delta = df['close'].diff()
        gain = delta.where(delta > 0, 0).ewm(span=14, adjust=False).mean()
        loss = (-delta).where(delta < 0, 0).ewm(span=14, adjust=False).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        rsi = df['rsi'].iloc[-1]
        
        # === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–†–ï–ù–î–ê (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–µ—Ç–æ–¥–∏–∫–∞) ===
        
        # –¢—Ä–µ–Ω–¥ –ø–æ —Å–∫–æ–ª—å–∑—è—â–∏–º —Å—Ä–µ–¥–Ω–∏–º: EMA20 > EMA50 > EMA200 = –ë–´–ß–ò–ô
        ema_bullish = ema_20 > ema_50 > ema_200
        ema_bearish = ema_20 < ema_50 < ema_200
        
        # –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA20 (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥)
        price_above_ema20 = current_price > ema_20
        
        # –ù–∞–∫–ª–æ–Ω EMA20 (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)
        ema20_slope = (df['ema_20'].iloc[-1] - df['ema_20'].iloc[-5]) / df['ema_20'].iloc[-5] * 100
        trend_strong = abs(ema20_slope) > 0.5  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –µ—Å–ª–∏ –Ω–∞–∫–ª–æ–Ω > 0.5%
        
        # –ò–¢–û–ì–û–í–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if current_price > ema_20:  # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20 = –±—ã—á–∏–π –Ω–∞—Å—Ç—Ä–æ–π
            trend = "BULLISH" if ema_bullish else "NEUTRAL"
            trend_up = True
            signal_type = "üü¢ LONG"
        else:  # –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20 = –º–µ–¥–≤–µ–∂–∏–π –Ω–∞—Å—Ç—Ä–æ–π
            trend = "BEARISH" if ema_bearish else "NEUTRAL"
            trend_up = False
            signal_type = "üî¥ SHORT"
        
        # === –ü–ò–í–û–¢–ù–´–ï –¢–û–ß–ö–ò –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ===
        
        pivot_highs, pivot_lows = calculate_pivot_points(df, window=3)
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–∏–≤–æ—Ç—ã –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        if pivot_highs:
            resistance_candidates = [price for _, price in pivot_highs if price > current_price]
            resistance = min(resistance_candidates) if resistance_candidates else df['high'].rolling(20).max().iloc[-1]
        else:
            resistance = df['high'].rolling(20).max().iloc[-1]
            
        if pivot_lows:
            support_candidates = [price for _, price in pivot_lows if price < current_price]  
            support = max(support_candidates) if support_candidates else df['low'].rolling(20).min().iloc[-1]
        else:
            support = df['low'].rolling(20).min().iloc[-1]
        
        # === –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –¢–û–†–ì–û–í–´–ï –ó–û–ù–´ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR ===
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∑–æ–Ω (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
        if atr_pct > 5:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            zone_multiplier = 0.4
        elif atr_pct > 2:  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å  
            zone_multiplier = 0.3
        else:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            zone_multiplier = 0.25
            
        zone_width = atr * zone_multiplier
        
        if trend_up:
            # === –ë–´–ß–ò–ô –°–ï–¢–ê–ü ===
            # –í—Ö–æ–¥: —á—É—Ç—å –≤—ã—à–µ EMA20 –∏–ª–∏ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            entry_center = max(ema_20 * 1.002, support + atr * 0.5)
            stop_loss_center = support - atr * 0.5  # –°—Ç–æ–ø –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            tp1_center = resistance  # –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å - —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
            tp2_center = resistance + atr * 2  # –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å - –ø—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            
        else:
            # === –ú–ï–î–í–ï–ñ–ò–ô –°–ï–¢–ê–ü ===  
            # –í—Ö–æ–¥: —á—É—Ç—å –Ω–∏–∂–µ EMA20 –∏–ª–∏ –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            entry_center = min(ema_20 * 0.998, resistance - atr * 0.5)
            stop_loss_center = resistance + atr * 0.5  # –°—Ç–æ–ø –∑–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º
            tp1_center = support  # –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å - –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            tp2_center = support - atr * 2  # –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å - –ø—Ä–æ–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω (–¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        entry_zone = {
            'lower': entry_center - zone_width,
            'upper': entry_center + zone_width, 
            'center': entry_center
        }
        
        stop_zone = {
            'lower': stop_loss_center - zone_width,
            'upper': stop_loss_center + zone_width,
            'center': stop_loss_center  
        }
        
        tp1_zone = {
            'lower': tp1_center - zone_width,
            'upper': tp1_center + zone_width,
            'center': tp1_center
        }
        
        tp2_zone = {
            'lower': tp2_center - zone_width,
            'upper': tp2_center + zone_width, 
            'center': tp2_center
        }
        
        # –ó–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        support_zone = {
            'lower': support - atr * 0.3,
            'upper': support + atr * 0.3,
            'center': support
        }
        
        resistance_zone = {
            'lower': resistance - atr * 0.3,
            'upper': resistance + atr * 0.3,
            'center': resistance  
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Risk/Reward
        risk = abs(entry_center - stop_loss_center)
        reward = abs(tp1_center - entry_center)
        risk_reward = reward / risk if risk > 0 else 0
        
        # –ï—Å–ª–∏ R/R –ø–ª–æ—Ö–æ–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª–∏
        if risk_reward < 1.5:
            if trend_up:
                tp1_center = entry_center + risk * 1.5
                tp2_center = entry_center + risk * 2.5
            else:
                tp1_center = entry_center - risk * 1.5  
                tp2_center = entry_center - risk * 2.5
        
        # === SMART MONEY –ê–ù–ê–õ–ò–ó ===
        smart_money_data = analyze_smart_money_concepts(df)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Smart Money
        smart_bias = smart_money_data.get('smart_money_bias', 'NEUTRAL')
        if smart_bias != 'NEUTRAL' and smart_bias != trend:
            # Smart Money –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É - –±–æ–ª—å—à–µ –≤–µ—Å Smart Money
            if smart_bias == 'BULLISH':
                signal_type = "üí∞ SMART LONG"
                trend_up = True
            else:
                signal_type = "üí∞ SMART SHORT"  
                trend_up = False
        
        return {
            'current_price': current_price,
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            'entry': entry_center,
            'stop_loss': stop_loss_center,
            'take_profit_1': tp1_center,
            'take_profit_2': tp2_center,
            'resistance': resistance,
            'support': support,
            
            # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ó–û–ù–´
            'entry_zone': entry_zone,
            'stop_zone': stop_zone,
            'tp1_zone': tp1_zone,
            'tp2_zone': tp2_zone,
            'support_zone': support_zone,
            'resistance_zone': resistance_zone,
            
            # –ò–ù–î–ò–ö–ê–¢–û–†–´
            'ema_20': ema_20,
            'ema_50': ema_50,
            'ema_200': ema_200,
            'atr': atr,
            'atr_pct': atr_pct,
            'rsi': rsi,
            'zone_width': zone_width,
            
            # –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê  
            'signal_type': signal_type,
            'trend': trend,
            'trend_up': trend_up,
            'trend_strong': trend_strong,
            'ema20_slope': ema20_slope,
            
            # SMART MONEY –î–ê–ù–ù–´–ï
            'smart_money_bias': smart_bias,
            'fair_value_gaps': smart_money_data.get('fair_value_gaps', []),
            'order_blocks': smart_money_data.get('order_blocks', []),
            'liquidity_zones': smart_money_data.get('liquidity_zones', []),
            'structure_analysis': smart_money_data.get('structure_analysis', {}),
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
            'risk_reward': risk_reward,
            'pivot_highs_count': len(pivot_highs),
            'pivot_lows_count': len(pivot_lows),
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
        return None

# === SMART MONEY & –ò–ú–ë–ê–õ–ê–ù–° –ê–ù–ê–õ–ò–ó ===

def detect_fair_value_gaps(df, min_gap_percent=0.1):
    """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fair Value Gaps (FVG) - –∏–º–±–∞–ª–∞–Ω—Å–æ–≤ —Ü–µ–Ω—ã"""
    fvgs = []
    
    try:
        for i in range(1, len(df) - 1):
            prev_candle = df.iloc[i-1]
            curr_candle = df.iloc[i] 
            next_candle = df.iloc[i+1]
            
            # –ë—ã—á–∏–π FVG: low —Ç–µ–∫—É—â–µ–π > high –ø—Ä–µ–¥—ã–¥—É—â–µ–π
            if curr_candle['low'] > prev_candle['high']:
                gap_size = curr_candle['low'] - prev_candle['high']
                gap_percent = (gap_size / prev_candle['close']) * 100
                
                if gap_percent >= min_gap_percent:
                    fvgs.append({
                        'index': i,
                        'type': 'BULLISH_FVG',
                        'top': curr_candle['low'],
                        'bottom': prev_candle['high'],
                        'size_percent': gap_percent
                    })
            
            # –ú–µ–¥–≤–µ–∂–∏–π FVG: high —Ç–µ–∫—É—â–µ–π < low –ø—Ä–µ–¥—ã–¥—É—â–µ–π  
            elif curr_candle['high'] < prev_candle['low']:
                gap_size = prev_candle['low'] - curr_candle['high']
                gap_percent = (gap_size / prev_candle['close']) * 100
                
                if gap_percent >= min_gap_percent:
                    fvgs.append({
                        'index': i,
                        'type': 'BEARISH_FVG', 
                        'top': prev_candle['low'],
                        'bottom': curr_candle['high'],
                        'size_percent': gap_percent
                    })
                    
        return fvgs[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 FVG
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ FVG: {e}")
        return []

def detect_order_blocks(df, pivot_highs, pivot_lows):
    """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Order Blocks - –∑–æ–Ω –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    order_blocks = []
    
    try:
        # –ë—ã—á—å–∏ Order Blocks: –ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ –ø–µ—Ä–µ–¥ –∏–º–ø—É–ª—å—Å–æ–º –≤–≤–µ—Ä—Ö
        for idx, price in pivot_lows:
            # –ò—â–µ–º –∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö –ø–æ—Å–ª–µ –ø–∏–≤–æ—Ç–∞ (–º–∏–Ω–∏–º—É–º 2% –¥–≤–∏–∂–µ–Ω–∏–µ)
            for i in range(idx + 1, min(idx + 10, len(df))):
                if df.iloc[i]['high'] > price * 1.02:  # 2% –∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –º–µ–¥–≤–µ–∂—å—é —Å–≤–µ—á—É –ø–µ—Ä–µ–¥ –∏–º–ø—É–ª—å—Å–æ–º
                    for j in range(idx, i):
                        candle = df.iloc[j]
                        if candle['close'] < candle['open']:  # –ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
                            order_blocks.append({
                                'index': j,
                                'type': 'BULLISH_OB',
                                'top': candle['high'],
                                'bottom': candle['low'],
                                'origin_price': price
                            })
                            break
                    break
        
        # –ú–µ–¥–≤–µ–∂—å–∏ Order Blocks: –ø–æ—Å–ª–µ–¥–Ω—è—è –±—ã—á—å—è —Å–≤–µ—á–∞ –ø–µ—Ä–µ–¥ –∏–º–ø—É–ª—å—Å–æ–º –≤–Ω–∏–∑
        for idx, price in pivot_highs:
            # –ò—â–µ–º –∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –ø–∏–≤–æ—Ç–∞  
            for i in range(idx + 1, min(idx + 10, len(df))):
                if df.iloc[i]['low'] < price * 0.98:  # 2% –∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±—ã—á—å—é —Å–≤–µ—á—É –ø–µ—Ä–µ–¥ –∏–º–ø—É–ª—å—Å–æ–º
                    for j in range(idx, i):
                        candle = df.iloc[j]
                        if candle['close'] > candle['open']:  # –ë—ã—á—å—è —Å–≤–µ—á–∞
                            order_blocks.append({
                                'index': j,
                                'type': 'BEARISH_OB',
                                'top': candle['high'],
                                'bottom': candle['low'], 
                                'origin_price': price
                            })
                            break
                    break
                    
        return order_blocks[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 OB
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ Order Blocks: {e}")
        return []

def detect_structure_breaks(df, pivot_highs, pivot_lows):
    """–î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Break of Structure (BOS) –∏ Change of Character (CHOCH)"""
    structure_analysis = {
        'bos_bullish': [],
        'bos_bearish': [],
        'choch_detected': False,
        'current_structure': 'NEUTRAL',
        'last_structure_change': None
    }
    
    try:
        current_price = df['close'].iloc[-1]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏–≤–æ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        recent_highs = [price for idx, price in pivot_highs[-3:]] if len(pivot_highs) >= 3 else []
        recent_lows = [price for idx, price in pivot_lows[-3:]] if len(pivot_lows) >= 3 else []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if recent_highs and recent_lows:
            # –í–æ—Å—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥—ã–π –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            if len(recent_highs) >= 2 and len(recent_lows) >= 2:
                higher_highs = all(recent_highs[i] > recent_highs[i-1] for i in range(1, len(recent_highs)))
                higher_lows = all(recent_lows[i] > recent_lows[i-1] for i in range(1, len(recent_lows)))
                
                lower_highs = all(recent_highs[i] < recent_highs[i-1] for i in range(1, len(recent_highs)))
                lower_lows = all(recent_lows[i] < recent_lows[i-1] for i in range(1, len(recent_lows)))
                
                if higher_highs and higher_lows:
                    structure_analysis['current_structure'] = 'BULLISH'
                elif lower_highs and lower_lows:
                    structure_analysis['current_structure'] = 'BEARISH'
        
        # –î–µ—Ç–µ–∫—Ü–∏—è BOS (–ø—Ä–æ–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        if pivot_highs:
            last_high_idx, last_high = pivot_highs[-1]
            if current_price > last_high:
                structure_analysis['bos_bullish'].append({
                    'price': last_high,
                    'broken_at': current_price,
                    'index': last_high_idx
                })
        
        if pivot_lows:
            last_low_idx, last_low = pivot_lows[-1] 
            if current_price < last_low:
                structure_analysis['bos_bearish'].append({
                    'price': last_low,
                    'broken_at': current_price,
                    'index': last_low_idx
                })
        
        return structure_analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return structure_analysis

def analyze_smart_money_concepts(df):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Smart Money –∫–æ–Ω—Ü–µ–ø—Ü–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∏–≤–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏
        pivot_highs, pivot_lows = calculate_pivot_points(df, window=3)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ Smart Money –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        fvgs = detect_fair_value_gaps(df)
        order_blocks = detect_order_blocks(df, pivot_highs, pivot_lows)
        structure = detect_structure_breaks(df, pivot_highs, pivot_lows)
        
        # –ò—â–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–æ–Ω—ã (–≥–¥–µ –º–æ–≥—É—Ç —Å—Ç–æ—è—Ç—å —Å—Ç–æ–ø—ã)
        liquidity_zones = []
        current_price = df['close'].iloc[-1]
        
        # –ó–æ–Ω—ã –Ω–∞–¥ –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –º–∞–∫—Å–∏–º—É–º–∞–º–∏ (—Å—Ç–æ–ø—ã —à–æ—Ä—Ç–æ–≤)
        for idx, high_price in pivot_highs[-5:]:
            if high_price > current_price:
                liquidity_zones.append({
                    'type': 'SHORT_LIQUIDITY',
                    'price': high_price,
                    'distance_percent': ((high_price - current_price) / current_price) * 100
                })
        
        # –ó–æ–Ω—ã –ø–æ–¥ –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –º–∏–Ω–∏–º—É–º–∞–º–∏ (—Å—Ç–æ–ø—ã –ª–æ–Ω–≥–æ–≤)  
        for idx, low_price in pivot_lows[-5:]:
            if low_price < current_price:
                liquidity_zones.append({
                    'type': 'LONG_LIQUIDITY', 
                    'price': low_price,
                    'distance_percent': ((current_price - low_price) / current_price) * 100
                })
        
        return {
            'fair_value_gaps': fvgs,
            'order_blocks': order_blocks,
            'structure_analysis': structure,
            'liquidity_zones': liquidity_zones,
            'smart_money_bias': determine_smart_money_bias(fvgs, order_blocks, structure)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Smart Money: {e}")
        return {}

def determine_smart_money_bias(fvgs, order_blocks, structure):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Smart Money –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    try:
        bullish_signals = 0
        bearish_signals = 0
        
        # FVG –∞–Ω–∞–ª–∏–∑
        for fvg in fvgs:
            if fvg['type'] == 'BULLISH_FVG':
                bullish_signals += 1
            else:
                bearish_signals += 1
        
        # Order Blocks –∞–Ω–∞–ª–∏–∑  
        for ob in order_blocks:
            if ob['type'] == 'BULLISH_OB':
                bullish_signals += 2  # OB –≤–µ—Å—è—Ç –±–æ–ª—å—à–µ
            else:
                bearish_signals += 2
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if structure['current_structure'] == 'BULLISH':
            bullish_signals += 3
        elif structure['current_structure'] == 'BEARISH': 
            bearish_signals += 3
            
        # BOS –∞–Ω–∞–ª–∏–∑
        bullish_signals += len(structure['bos_bullish'])
        bearish_signals += len(structure['bos_bearish'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if bullish_signals > bearish_signals + 1:
            return 'BULLISH'
        elif bearish_signals > bullish_signals + 1:
            return 'BEARISH'
        else:
            return 'NEUTRAL'
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Smart Money bias: {e}")
        return 'NEUTRAL'

# --- –§–£–ù–ö–¶–ò–Ø –°–¢–ê–¢–£–°–ê –ê–í–¢–û–°–ö–†–ò–ù–ò–ù–ì–ê ---
def auto_scanning_active():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∞–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥"""
    try:
        job = scheduler.get_job('auto_scalping_scan')
        return job is not None
    except:
        return False

# --- COINGECKO API INTEGRATION ---

def get_coin_data_coingecko(symbol, days=7, retry_count=3):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —Å CoinGecko API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é"""
    try:
        # –ü–æ–ª–Ω—ã–π CoinGecko mapping –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
        coin_id_map = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
            'BTC': 'bitcoin', 'ETH': 'ethereum', 'BNB': 'binancecoin', 
            'ADA': 'cardano', 'SOL': 'solana', 'XRP': 'ripple',
            'DOGE': 'dogecoin', 'DOT': 'polkadot', 'AVAX': 'avalanche-2',
            'LINK': 'chainlink', 'LTC': 'litecoin', 'UNI': 'uniswap',
            'ATOM': 'cosmos', 'XLM': 'stellar', 'VET': 'vechain',
            'ICP': 'internet-computer', 'FIL': 'filecoin', 'TRX': 'tron',
            'ETC': 'ethereum-classic', 'AAVE': 'aave', 'SUSHI': 'sushi',
            'PEPE': 'pepe', 'SHIB': 'shiba-inu', 'MEME': 'memecoin',
            'BONK': 'bonk', 'FLOKI': 'floki', 'WIF': 'dogwifhat',
            'NOT': 'notcoin', 'TON': 'the-open-network', 'MATIC': 'matic-network',
            'NEAR': 'near', 'ALGO': 'algorand', 'HBAR': 'hedera-hashgraph',
            'QNT': 'quant-network', 'OP': 'optimism', 'ARB': 'arbitrum',
            'COMP': 'compound-governance-token', 'MKR': 'maker', 'YFI': 'yearn-finance',
            'CRV': 'curve-dao-token', 'SNX': 'synthetix-network-token', '1INCH': '1inch',
            'ENJ': 'enjincoin', 'MANA': 'decentraland', 'SAND': 'the-sandbox',
            'AXS': 'axie-infinity', 'GALA': 'gala', 'CHZ': 'chiliz',
            'BAT': 'basic-attention-token', 'ZIL': 'zilliqa', 'HOT': 'holo',
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            'ETHFI': 'ether-fi', 'ORDI': 'ordi', 'PEOPLE': 'constitutiondao',
            'DYDX': 'dydx-chain', 'CELO': 'celo', 'STRK': 'starknet',
            'AI': 'sleepless-ai', 'POL': 'polygon-ecosystem-token', 'IOTX': 'iotex',
            'CAKE': 'pancakeswap-token', 'LUNC': 'terra-luna-classic', 'BAKE': 'bakerytoken',
            'SUI': 'sui', 'WLFI': 'world-liberty-financial',
            # –ù–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤  
            'PUMP': 'moonpump', 'TAO': 'bittensor', 'ENS': 'ethereum-name-service',
            'ENA': 'ethena', 'S': 'solidus-aitech', 'INJ': 'injective-protocol',
            'W': 'wormhole', 'ADX': 'adex', 'ROSE': 'oasis-network', 'USTC': 'terraclassicusd',
            'SEI': 'sei-network', 'FIDA': 'bonfida', 'PNUT': 'peanut-the-squirrel',
            'JASMY': 'jasmycoin', 'TURBO': 'turbo', 'EIGEN': 'eigenlayer',
            'SCR': 'scroll', 'IO': 'io', 'TRB': 'tellor', 'APT': 'aptos',
            'LDO': 'lido-dao', 'ALT': 'altlayer', 'WLD': 'worldcoin',
            'BCH': 'bitcoin-cash', 'AEVO': 'aevo', 'ZRX': '0x',
            'ANKR': 'ankr', 'YGG': 'yield-guild-games', 'XAI': 'xai-games',
            'ILV': 'illuvium', 'SCRT': 'secret', 'EGLD': 'elrond-erd-2',
            'JUP': 'jupiter-exchange-solana', 'FET': 'fetch-ai', 'GRT': 'the-graph',
            'PIXEL': 'pixels', 'IDEX': 'idex', 'DASH': 'dash',
            'PORTAL': 'portal', 'PROM': 'prometeus', 'VTHO': 'vethor-token',
            'C98': 'coin98', 'VANRY': 'vanar-chain', 'TIA': 'celestia',
            'TRUMP': 'maga', 'ID': 'space-id', 'JTO': 'jito-governance-token',
            'HOOK': 'hooked-protocol', 'MASK': 'mask-network', 'PERP': 'perpetual-protocol',
            'FXS': 'frax-share', 'MAV': 'maverick-protocol', 'SLP': 'smooth-love-potion',
            'RVN': 'ravencoin', 'CFX': 'conflux-token', 'MANTA': 'manta-network',
            'LUNA': 'terra-luna-2'
        }
        
        coin_id = coin_id_map.get(symbol.upper(), symbol.lower())
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ headers –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CoinGecko
        headers = {
            'User-Agent': 'Mozilla/5.0 (TradingBot/4.0; +https://replit.com)',
            'Accept': 'application/json',
            'Cache-Control': 'no-cache'
        }
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        days = max(days, 7)  # –ú–∏–Ω–∏–º—É–º –Ω–µ–¥–µ–ª—è –¥–∞–Ω–Ω—ã—Ö
        
        # –ó–∞–ø—Ä–æ—Å –∫ CoinGecko API —Å retry –ª–æ–≥–∏–∫–æ–π
        url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
        params = {
            'vs_currency': 'usd',
            'days': days,
            'interval': 'hourly'
        }
        
        for attempt in range(retry_count):
            try:
                response = requests.get(url, params=params, headers=headers, timeout=20)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if 'prices' not in data or len(data['prices']) < 20:
                        print(f"‚ö†Ô∏è CoinGecko: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (–ø–æ–ª—É—á–µ–Ω–æ {len(data.get('prices', []))})")
                        return None
                    
                    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö CoinGecko
                    prices = data['prices']
                    volumes = data['total_volumes']
                    
                    df = pd.DataFrame(data=prices, columns=['timestamp', 'close'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df['volume'] = [v[1] for v in volumes[:len(df)]]
                    
                    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è OHLC –¥–∞–Ω–Ω—ã—Ö
                    df = df.sort_values('timestamp').reset_index(drop=True)
                    df['open'] = df['close'].shift(1).fillna(df['close'].iloc[0])
                    
                    # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è high/low
                    volatility = df['close'].pct_change().std() * 0.5
                    df['high'] = df[['open', 'close']].max(axis=1) * (1 + volatility)
                    df['low'] = df[['open', 'close']].min(axis=1) * (1 - volatility)
                    
                    print(f"‚úÖ CoinGecko: –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Ç–æ—á–µ–∫ –¥–ª—è {symbol}")
                    return df
                    
                elif response.status_code == 429:  # Rate limit
                    wait_time = 2 ** attempt
                    print(f"‚è≥ CoinGecko rate limit, –∂–¥–µ–º {wait_time}—Å...")
                    time.sleep(wait_time)
                elif response.status_code == 401:  # Unauthorized
                    print(f"‚ùå CoinGecko API –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {symbol}: 401")
                    return None
                    continue
                    
                else:
                    print(f"‚ùå CoinGecko API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {response.status_code}")
                    if attempt == retry_count - 1:
                        return None
                    time.sleep(1)
                    continue
                    
            except requests.RequestException as e:
                print(f"‚ö†Ô∏è CoinGecko –∑–∞–ø—Ä–æ—Å {attempt+1}/{retry_count} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
                if attempt < retry_count - 1:
                    time.sleep(2)
                    continue
                return None
        
        return None
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ CoinGecko –¥–ª—è {symbol}: {e}")
        return None

def get_trending_coins_coingecko():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã —Å CoinGecko"""
    try:
        url = "https://api.coingecko.com/api/v3/search/trending"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            trending = []
            
            for coin in data['coins'][:10]:  # –¢–û–ü-10 —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö
                trending.append({
                    'symbol': coin['item']['symbol'].upper(),
                    'name': coin['item']['name'],
                    'score': coin['item']['score'] if 'score' in coin['item'] else 95,
                    'source': 'coingecko'
                })
            
            return trending
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ CoinGecko: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ CoinGecko: {e}")
        return []

# --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
def get_coin_data(symbol, interval="1h", limit=100, source=None, auto_fallback=True):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É"""
    global data_source
    
    if source is None:
        source = data_source
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏: –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö
    mexc_only_coins = ['IP']  # –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞ MEXC
    coingecko_only_coins = []  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    
    if symbol.upper() in mexc_only_coins:
        source = "mexc"
        auto_fallback = False  # –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        print(f"üîÑ {symbol} –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ MEXC API")
    elif symbol.upper() in coingecko_only_coins:
        source = "coingecko"
        auto_fallback = False  # –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Binance
        print(f"üîÑ {symbol} –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ CoinGecko API")
    
    original_source = source
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if source == "coingecko":
        print(f"üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é {symbol} –∏–∑ CoinGecko...")
        
        # CoinGecko —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–Ω—è–º–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        days = 1
        if 'h' in interval:
            hours = int(interval.replace('h', ''))
            days = max(7, (limit * hours) / 24)  # –ú–∏–Ω–∏–º—É–º –Ω–µ–¥–µ–ª—è –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        elif 'd' in interval:
            days = max(7, int(interval.replace('d', '')) * limit)
        elif 'w' in interval:
            days = max(7, int(interval.replace('w', '')) * limit * 7)
        elif 'M' in interval:
            days = max(30, int(interval.replace('M', '')) * limit * 30)
            
        df = get_coin_data_coingecko(symbol, days=min(int(days), 365))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        if df is not None and len(df) >= 20:
            print(f"‚úÖ CoinGecko —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª {len(df)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return df
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫ Binance –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å CoinGecko
        if auto_fallback:
            print(f"‚ö†Ô∏è CoinGecko –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Binance...")
            source = "binance"
        else:
            print(f"‚ùå CoinGecko: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
            return None
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MEXC
    if source == "mexc":
        print(f"üìä –ü–æ–ª—É—á–∞—é {symbol} –∏–∑ MEXC...")
        df = get_mexc_klines(symbol, interval, limit)
        
        if df is not None and len(df) >= 20:
            print(f"‚úÖ MEXC –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return df
        else:
            print(f"‚ùå MEXC –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return None
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Binance (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    if source == "binance":
        if original_source == "coingecko":
            print(f"üìä –ü–æ–ª—É—á–∞—é {symbol} –∏–∑ Binance (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)...")
        else:
            print(f"üìä –ü–æ–ª—É—á–∞—é {symbol} –∏–∑ Binance...")
            
        df = get_coin_klines(symbol, interval, limit)
        
        if df is not None and len(df) >= 20:
            if original_source == "coingecko":
                print(f"‚úÖ Binance —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} —Å–≤–µ—á–µ–π")
            else:
                print(f"‚úÖ Binance –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return df
        else:
            print(f"‚ùå Binance —Ç–∞–∫–∂–µ –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return None
    
    return None

def calculate_technical_indicators(df):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        # RSI (Relative Strength Index)
        def calculate_rsi(prices, window=14):
            delta = prices.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
            rs = gain / loss
            return 100 - (100 / (1 + rs))
        
        # MACD
        def calculate_macd(prices, fast=12, slow=26, signal=9):
            exp1 = prices.ewm(span=fast).mean()
            exp2 = prices.ewm(span=slow).mean()
            macd = exp1 - exp2
            macd_signal = macd.ewm(span=signal).mean()
            macd_histogram = macd - macd_signal
            return macd, macd_signal, macd_histogram
        
        # Bollinger Bands
        def calculate_bollinger(prices, window=20, num_std=2):
            sma = prices.rolling(window).mean()
            std = prices.rolling(window).std()
            upper_band = sma + (std * num_std)
            lower_band = sma - (std * num_std)
            return upper_band, sma, lower_band
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['sma_10'] = df['close'].rolling(10).mean()
        df['sma_20'] = df['close'].rolling(20).mean()
        df['ema_12'] = df['close'].ewm(span=12).mean()
        df['ema_26'] = df['close'].ewm(span=26).mean()
        
        df['rsi'] = calculate_rsi(df['close'])
        df['macd'], df['macd_signal'], df['macd_histogram'] = calculate_macd(df['close'])
        df['bb_upper'], df['bb_middle'], df['bb_lower'] = calculate_bollinger(df['close'])
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return df

def create_trading_chart(symbol, df, levels, timeframe='1h'):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        if df is None or levels is None or len(df) < 20:
            return None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df = calculate_technical_indicators(df)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞
        plt.style.use('dark_background')
        fig = plt.figure(figsize=(16, 12))
        
        # –°–æ–∑–¥–∞–µ–º 3 –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
        gs = fig.add_gridspec(3, 1, height_ratios=[3, 1, 1], hspace=0.3)
        ax_price = fig.add_subplot(gs[0])
        ax_market = fig.add_subplot(gs[1])
        ax_volume = fig.add_subplot(gs[2])
        
        # === –ü–û–î–ì–û–¢–û–í–ö–ê –í–†–ï–ú–ï–ù–ù–û–ô –û–°–ò ===
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
        if 'open_time' in df.columns:
            time_axis = pd.to_datetime(df['open_time'], unit='ms')
        elif 'timestamp' in df.columns:
            time_axis = pd.to_datetime(df['timestamp'], unit='ms')
        else:
            from datetime import datetime, timedelta
            timeframe_minutes = {
                '1m': 1, '3m': 3, '5m': 5, '15m': 15, '30m': 30,
                '1h': 60, '2h': 120, '4h': 240, '6h': 360, '8h': 480, '12h': 720,
                '1d': 1440, '3d': 4320, '1w': 10080, '1M': 43200
            }.get(timeframe, 60)
            
            end_time = datetime.now()
            start_time = end_time - timedelta(minutes=timeframe_minutes * len(df))
            time_axis = pd.date_range(start=start_time, end=end_time, periods=len(df))
        
        x_range = list(range(len(df)))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è fill_between
        
        # === 1. –û–°–ù–û–í–ù–û–ô –ì–†–ê–§–ò–ö –¶–ï–ù–´ ===
        
        # Bollinger Bands (–∑–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏)
        ax_price.fill_between(x_range, df['bb_upper'], df['bb_lower'], 
                            alpha=0.1, color='purple', label='Bollinger Bands')
        ax_price.plot(x_range, df['bb_upper'], color='purple', linewidth=1, alpha=0.7)
        ax_price.plot(x_range, df['bb_lower'], color='purple', linewidth=1, alpha=0.7)
        ax_price.plot(x_range, df['bb_middle'], color='purple', linewidth=1, alpha=0.9, linestyle='--')
        
        # –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ –≤ —Å—Ç–∏–ª–µ TradingView
        from matplotlib.patches import Rectangle
        
        for i in range(len(df)):
            row = df.iloc[i]
            
            # –¶–≤–µ—Ç–∞ –∫–∞–∫ –Ω–∞ TradingView
            is_bullish = row['close'] >= row['open']
            candle_color = '#26a69a' if is_bullish else '#ef5350'  # TradingView —Ü–≤–µ—Ç–∞
            
            # –¢–µ–ª–æ —Å–≤–µ—á–∏
            body_height = abs(row['close'] - row['open'])
            body_bottom = min(row['open'], row['close'])
            
            if body_height > 0:  # –ï—Å—Ç—å —Ç–µ–ª–æ —Å–≤–µ—á–∏
                ax_price.add_patch(Rectangle((i-0.4, body_bottom), 0.8, body_height, 
                                          facecolor=candle_color, edgecolor=candle_color, 
                                          alpha=0.9, linewidth=0.5))
            else:  # –î–æ–¥–∂–∏ - –ª–∏–Ω–∏—è
                ax_price.plot([i-0.4, i+0.4], [row['close'], row['close']], 
                            color=candle_color, linewidth=1.5)
            
            # –¢–µ–Ω–∏ —Å–≤–µ—á–∏ (–±–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–µ)
            if row['high'] > max(row['open'], row['close']):
                ax_price.plot([i, i], [max(row['open'], row['close']), row['high']], 
                            color=candle_color, linewidth=1, alpha=0.9)
            if row['low'] < min(row['open'], row['close']):
                ax_price.plot([i, i], [row['low'], min(row['open'], row['close'])], 
                            color=candle_color, linewidth=1, alpha=0.9)
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ TradingView
        ax_price.plot(x_range, df['sma_10'], color='#2196f3', linewidth=1.5, 
                     label='SMA 10', alpha=0.9)
        ax_price.plot(x_range, df['sma_20'], color='#ff9800', linewidth=1.5, 
                     label='SMA 20', alpha=0.9)
        ax_price.plot(x_range, df['ema_12'], color='#9c27b0', linewidth=1.2, 
                     label='EMA 12', alpha=0.8, linestyle='--')
        ax_price.plot(x_range, df['ema_26'], color='#4caf50', linewidth=1.2, 
                     label='EMA 26', alpha=0.8, linestyle='--')
        
        # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –¢–û–†–ì–û–í–´–ï –ó–û–ù–´ (–≤–º–µ—Å—Ç–æ –ª–∏–Ω–∏–π)
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–æ—Å—Ç–∞—ë—Ç—Å—è –ª–∏–Ω–∏–µ–π)
        ax_price.axhline(y=levels['current_price'], color='white', linestyle='-', 
                        linewidth=3, alpha=0.9, label=f"–¶–µ–Ω–∞: ${levels['current_price']:.6f}")
        
        # –ó–æ–Ω–∞ –≤—Ö–æ–¥–∞ (–∂—ë–ª—Ç–∞—è) - –ë–ï–ó –≠–ú–û–î–ó–ò
        ax_price.fill_between(x_range, levels['entry_zone']['lower'], levels['entry_zone']['upper'], 
                             alpha=0.25, color='#ffff00', label=f"ENTRY: ${levels['entry_zone']['lower']:.4f}-${levels['entry_zone']['upper']:.4f}")
        ax_price.axhline(y=levels['entry_zone']['center'], color='#ffff00', linestyle='--', 
                        linewidth=1, alpha=0.8)
        
        # –ó–æ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–∫—Ä–∞—Å–Ω–∞—è) - –ë–ï–ó –≠–ú–û–î–ó–ò  
        ax_price.fill_between(x_range, levels['stop_zone']['lower'], levels['stop_zone']['upper'], 
                             alpha=0.25, color='#ff3333', label=f"STOP: ${levels['stop_zone']['lower']:.4f}-${levels['stop_zone']['upper']:.4f}")
        ax_price.axhline(y=levels['stop_zone']['center'], color='#ff3333', linestyle='--', 
                        linewidth=1, alpha=0.8)
        
        # –ó–æ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 1 (–∑–µ–ª—ë–Ω–∞—è) - –ë–ï–ó –≠–ú–û–î–ó–ò
        ax_price.fill_between(x_range, levels['tp1_zone']['lower'], levels['tp1_zone']['upper'], 
                             alpha=0.25, color='#33ff33', label=f"TP1: ${levels['tp1_zone']['lower']:.4f}-${levels['tp1_zone']['upper']:.4f}")
        ax_price.axhline(y=levels['tp1_zone']['center'], color='#33ff33', linestyle='--', 
                        linewidth=1, alpha=0.8)
        
        # –ó–æ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2 (—Ç—ë–º–Ω–æ-–∑–µ–ª—ë–Ω–∞—è) - –ë–ï–ó –≠–ú–û–î–ó–ò  
        ax_price.fill_between(x_range, levels['tp2_zone']['lower'], levels['tp2_zone']['upper'], 
                             alpha=0.25, color='#00aa00', label=f"TP2: ${levels['tp2_zone']['lower']:.4f}-${levels['tp2_zone']['upper']:.4f}")
        ax_price.axhline(y=levels['tp2_zone']['center'], color='#00aa00', linestyle='--', 
                        linewidth=1, alpha=0.8)
        
        # –ó–û–ù–´ –ü–û–î–î–ï–†–ñ–ö–ò –ò –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–Ø - –ë–ï–ó –≠–ú–û–î–ó–ò
        
        # –ó–æ–Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–æ—Ä–∞–Ω–∂–µ–≤–∞—è)
        ax_price.fill_between(x_range, levels['resistance_zone']['lower'], levels['resistance_zone']['upper'], 
                             alpha=0.2, color='#ff9900', label=f"RESISTANCE: ${levels['resistance_zone']['lower']:.4f}-${levels['resistance_zone']['upper']:.4f}")
        ax_price.axhline(y=levels['resistance_zone']['center'], color='#ff9900', linestyle='-', 
                        linewidth=2, alpha=0.8)
        
        # –ó–æ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–≥–æ–ª—É–±–∞—è)
        ax_price.fill_between(x_range, levels['support_zone']['lower'], levels['support_zone']['upper'], 
                             alpha=0.2, color='#00ccff', label=f"SUPPORT: ${levels['support_zone']['lower']:.4f}-${levels['support_zone']['upper']:.4f}")
        ax_price.axhline(y=levels['support_zone']['center'], color='#00ccff', linestyle='-', 
                        linewidth=2, alpha=0.8)
        
        # === 2. MARKET STRUCTURE / –ó–û–ù–´ –ü–û–ö–£–ü–ö–ò-–ü–†–û–î–ê–ñ–ò ===
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π vs –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        buy_pressure = []
        sell_pressure = []
        
        for i in range(len(df)):
            candle = df.iloc[i]
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è = –¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
            if candle['close'] > candle['open']:
                buy_strength = (candle['close'] - candle['open']) / candle['open'] * 100
                sell_strength = 0
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∏–∂–µ –æ—Ç–∫—Ä—ã—Ç–∏—è = –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤  
            elif candle['close'] < candle['open']:
                buy_strength = 0
                sell_strength = (candle['open'] - candle['close']) / candle['open'] * 100
            else:
                buy_strength = 0
                sell_strength = 0
            
            buy_pressure.append(buy_strength)
            sell_pressure.append(-sell_strength)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω–∏–∑—É
        
        # –†–∏—Å—É–µ–º –∑–æ–Ω—ã –ø–æ–∫—É–ø–∫–∏ (–∑–µ–ª–µ–Ω—ã–µ) –∏ –ø—Ä–æ–¥–∞–∂–∏ (–∫—Ä–∞—Å–Ω—ã–µ)
        ax_market.bar(x_range, buy_pressure, color='#26a69a', alpha=0.7, 
                     width=0.8, label='–ó–æ–Ω—ã –ø–æ–∫—É–ø–∫–∏')
        ax_market.bar(x_range, sell_pressure, color='#ef5350', alpha=0.7, 
                     width=0.8, label='–ó–æ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏')
        
        # –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
        ax_market.axhline(y=0, color='gray', linestyle='-', alpha=0.5, linewidth=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é –¥–∞–≤–ª–µ–Ω–∏—è
        buy_ma = pd.Series(buy_pressure).rolling(10).mean()
        sell_ma = pd.Series(sell_pressure).rolling(10).mean()
        ax_market.plot(x_range, buy_ma, color='#00ff00', linewidth=2, alpha=0.8, label='Trend Buy')
        ax_market.plot(x_range, sell_ma, color='#ff0000', linewidth=2, alpha=0.8, label='Trend Sell')
        
        # === 3. –ì–†–ê–§–ò–ö –û–ë–™–ï–ú–û–í ===
        
        # –û–±—ä–µ–º—ã —Å TradingView —Ü–≤–µ—Ç–∞–º–∏
        volume_colors = ['#26a69a' if df.iloc[i]['close'] >= df.iloc[i]['open'] else '#ef5350' 
                        for i in range(len(df))]
        ax_volume.bar(x_range, df['volume'], color=volume_colors, alpha=0.6, width=0.8)
        
        # –°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ–±—ä–µ–º–∞
        volume_ma = df['volume'].rolling(20).mean()
        ax_volume.plot(x_range, volume_ma, color='orange', linewidth=2, alpha=0.8, label='MA Volume')
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –í–°–ï–• –û–°–ï–ô –í –°–¢–ò–õ–ï TRADINGVIEW ===
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
        all_axes = [ax_price, ax_market, ax_volume]
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        step = max(1, len(df) // 8)  # 8 –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        tick_positions = list(range(0, len(df), step))
        
        if timeframe in ['1m', '3m', '5m', '15m', '30m']:
            format_str = '%H:%M'
        elif timeframe in ['1h', '2h', '4h', '6h', '8h', '12h']:
            format_str = '%m-%d %H:%M'
        else:
            format_str = '%m-%d'
            
        tick_labels = [time_axis[i].strftime(format_str) for i in tick_positions if i < len(df)]
        
        for ax in all_axes:
            ax.set_xlim(0, len(df)-1)
            ax.set_xticks(tick_positions[:len(tick_labels)])
            ax.set_xticklabels([str(label) for label in tick_labels] if ax == ax_volume else [], 
                             rotation=0, ha='center', fontsize=9, color='#cccccc')
            
            # –°–µ—Ç–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView
            ax.grid(True, linestyle='-', linewidth=0.5, color='#404040', alpha=0.7)
            ax.set_facecolor('#131722')  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω TradingView
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã
        ax_price.set_title(f'{symbol}/USDT ‚Ä¢ {timeframe} ‚Ä¢ {levels["signal_type"]}', 
                          fontsize=14, fontweight='bold', color='#f0f3fa', pad=20)
        ax_price.set_ylabel('')  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å, —Ü–µ–Ω—ã –±—É–¥—É—Ç —Å–ø—Ä–∞–≤–∞
        ax_price.legend(loc='lower center', fontsize=7, framealpha=0.8, 
                       facecolor='#1e222d', edgecolor='#404040', ncol=2,
                       bbox_to_anchor=(0.5, -0.15))
        
        # –ü—Ä–∞–≤–∞—è –æ—Å—å –¥–ª—è —Ü–µ–Ω (–∫–∞–∫ –≤ TradingView)
        ax_price_right = ax_price.twinx()
        ax_price_right.set_ylim(ax_price.get_ylim())
        ax_price_right.set_ylabel('–¶–µ–Ω–∞', fontsize=10, color='#cccccc')
        ax_price_right.tick_params(axis='y', labelcolor='#cccccc')
        
        
        # –û–±—ä–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ax_volume.set_ylabel('–û–±—ä–µ–º', fontsize=9, color='#cccccc')
        ax_volume.tick_params(axis='y', labelcolor='#cccccc', labelsize=8)
        ax_volume.set_xlabel('–í—Ä–µ–º—è', fontsize=9, color='#cccccc')
        ax_volume.legend(loc='upper left', fontsize=7, framealpha=0.3)
        
        # Market Structure –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ax_market.set_ylabel('Buy/Sell Pressure', fontsize=9, color='#cccccc')
        ax_market.tick_params(axis='y', labelcolor='#cccccc', labelsize=8)
        ax_market.legend(loc='upper left', fontsize=7, framealpha=0.3)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã (–≤ —Å—Ç–∏–ª–µ TradingView)
        for ax in all_axes:
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False) 
            ax.spines['bottom'].set_color('#404040')
            ax.spines['left'].set_color('#404040')
            ax.tick_params(axis='x', colors='#cccccc')
            ax.tick_params(axis='y', colors='#cccccc')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–≥—É—Ä—ã –≤ —Å—Ç–∏–ª–µ TradingView
        fig.patch.set_facecolor('#131722')
        plt.subplots_adjust(hspace=0.25, bottom=0.15)  # –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã –≤–Ω–∏–∑—É
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        current_price = levels['current_price']
        price_change = ((current_price - df['close'].iloc[-20]) / df['close'].iloc[-20]) * 100
        color = '#26a69a' if price_change >= 0 else '#ef5350'
        
        info_text = f"${current_price:.6f}  {price_change:+.2f}%"
        ax_price.text(0.99, 0.99, info_text, transform=ax_price.transAxes,
                     ha='right', va='top', fontsize=12, fontweight='bold',
                     color=color, bbox=dict(boxstyle="round,pad=0.3", 
                     facecolor='#1e222d', alpha=0.8, edgecolor='none'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight',
                   facecolor='#131722', edgecolor='none', pad_inches=0.1)
        buffer.seek(0)
        plt.close()
        
        return buffer
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        if 'fig' in locals():
            plt.close()
        return None

def safe_caption(text, max_length=1024):
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è Telegram caption"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

def smart_format_price(price):
    """–£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë —Ä–∞–∑–º–µ—Ä–∞"""
    if price == 0:
        return "$0.000"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    if price >= 1:
        return f"${price:.3f}"
    elif price >= 0.01:
        return f"${price:.4f}"
    elif price >= 0.001:
        return f"${price:.5f}"
    elif price >= 0.0001:
        return f"${price:.6f}"
    elif price >= 0.00001:
        return f"${price:.7f}"
    else:
        return f"${price:.8f}"

def generate_chart_analysis(symbol, levels, current_market_analysis="", timeframe='1h'):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        if not levels:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
        
        risk_reward = abs(levels['take_profit_1'] - levels['entry']) / abs(levels['entry'] - levels['stop_loss'])
        volatility = (levels['atr'] / levels['current_price']) * 100
        
        trend_description = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π üìà" if levels['trend_up'] else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π üìâ"
        
        # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
        trend_desc = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π üìà" if levels.get('trend_up') else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π üìâ"
        
        analysis = f"""üìä {symbol.replace('USDT', '/USDT')} {timeframe}

{levels['signal_type']} | {trend_desc}

üí∞ –¶–µ–Ω–∞: {smart_format_price(levels['current_price'])}
üìä EMA20: {smart_format_price(levels.get('ema_20', 0))} | RSI: {levels.get('rsi', 50):.0f}
üìà ATR: {levels.get('atr_pct', 0):.1f}% | R/R: 1:{levels.get('risk_reward', 0):.1f}

üéØ –¢–û–†–ì–û–í–´–ï –ó–û–ù–´:
üü° –í—Ö–æ–¥: {smart_format_price(levels['entry_zone']['lower'])}-{smart_format_price(levels['entry_zone']['upper'])}
üî¥ –°—Ç–æ–ø: {smart_format_price(levels['stop_zone']['lower'])}-{smart_format_price(levels['stop_zone']['upper'])}
üü¢ TP1: {smart_format_price(levels['tp1_zone']['lower'])}-{smart_format_price(levels['tp1_zone']['upper'])}
üü¢ TP2: {smart_format_price(levels['tp2_zone']['lower'])}-{smart_format_price(levels['tp2_zone']['upper'])}

{current_market_analysis}

–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π. –¢–æ—Ä–≥—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ."""

        return analysis
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ë–ï–ó –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á)
scheduler = BackgroundScheduler()
scheduler.start()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_source = "binance"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Binance, –º–æ–∂–µ—Ç –±—ã—Ç—å "coingecko"

# –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /start_scan

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
atexit.register(lambda: scheduler.shutdown())

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    try:
        print("üì® –ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
        json_str = request.get_data().decode('UTF-8')
        print(f"üìù –î–∞–Ω–Ω—ã–µ webhook: {json_str[:200]}...")  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        update = tg_types.Update.de_json(json_str)
        if update:
            print("‚úÖ Update –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
            bot.process_new_updates([update])
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å update")
        return "OK", 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return "ERROR", 500

@app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫!", 200

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    notify_admin_about_user_request(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name, 
        "–ö–æ–º–∞–Ω–¥–∞ /start", 
        "/start"
    )
    
    bot.reply_to(message, "üöÄ **–°–£–ü–ï–† –¢–û–†–ì–û–í–´–ô –ë–û–¢ –ì–û–¢–û–í!**\n\nüìã –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥\n\nüéØ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**\n‚Ä¢ `BTC 4h` - –≥—Ä–∞—Ñ–∏–∫ Bitcoin –Ω–∞ 4 —á–∞—Å–∞\n‚Ä¢ `/scan` - –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –º–æ–Ω–µ—Ç —Å–µ–π—á–∞—Å\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")

@bot.message_handler(commands=['help', 'menu', '–∫–æ–º–∞–Ω–¥—ã'])
def help_command(message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–º–æ—â–∏
    notify_admin_about_user_request(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name, 
        "–ö–æ–º–∞–Ω–¥–∞ /help", 
        "/help"
    )
    
    help_text = """ü§ñ **–¢–û–†–ì–û–í–´–ô –ë–û–¢ - –ü–û–õ–ù–û–ï –†–£–ö–û–í–û–î–°–¢–í–û v4.0**

üìä **–ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú–û–í–´–ô –ê–ù–ê–õ–ò–ó:**
‚îú `BTC` - –∞–Ω–∞–ª–∏–∑ Bitcoin –Ω–∞ 1h –≥—Ä–∞—Ñ–∏–∫–µ
‚îú `XRP 4h` - –∞–Ω–∞–ª–∏–∑ XRP –Ω–∞ 4-—á–∞—Å–æ–≤–æ–º –≥—Ä–∞—Ñ–∏–∫–µ  
‚îú `ETH 15min` - –∞–Ω–∞–ª–∏–∑ Ethereum –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω–æ–º
‚îú `SOL daily` - –¥–Ω–µ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ Solana
‚îî `DOGE 1w` - –Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Dogecoin

‚è∞ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:**
`1m` `5m` `15m` `30m` `1h` `2h` `4h` `6h` `8h` `12h` `1d` `3d` `1w` `1M`

üîç **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ù–ò–ù–ì:**
‚îú `/scan` - –Ω–∞–π—Ç–∏ –¢–û–ü –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å
‚îú `/start_scan` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥ (60 —Å–µ–∫)
‚îî `/stop_scan` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥

üì∏ **–ê–ù–ê–õ–ò–ó –ì–†–ê–§–ò–ö–û–í:**
‚îú –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞ - –ø–æ–ª—É—á–∏ AI –∞–Ω–∞–ª–∏–∑
‚îî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤


üîÑ **–ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–• (–ù–û–í–û–ï!):**
‚îú `/source` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ (Binance/CoinGecko)
‚îú `/trending` - –¢–û–ü —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã (CoinGecko)
‚îî Binance: —Ç–æ—á–Ω–æ—Å—Ç—å | CoinGecko: 18,000+ –º–æ–Ω–µ—Ç

‚ÑπÔ∏è **–ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´:**
‚îú `/help` - —ç—Ç–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
‚îú `/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚îî `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º

üí° **–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:**

üî∏ **–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑:** `BTC 4h`
üî∏ **–°–∫–∞–ª—å–ø–∏–Ω–≥:** `XRP 5min` 
üî∏ **–°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥:** `ETH daily`
üî∏ **–ü–æ–∏—Å–∫ —Å–µ—Ç–∞–ø–æ–≤:** `/scan`
üî∏ **–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã:** `/trending`
üî∏ **–°–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:** `/source`
üî∏ **–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞:** [—Ñ–æ—Ç–æ] + –æ–ø–∏—Å–∞–Ω–∏–µ

‚ö° **–†–ï–ó–£–õ–¨–¢–ê–¢ –ö–ê–ñ–î–û–ì–û –ê–ù–ê–õ–ò–ó–ê:**
‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
‚úÖ –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞  
‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
‚úÖ Risk/Reward —Ä–∞—Å—á–µ—Ç
‚úÖ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ 2+ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üéØ **–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!** –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã—à–µ"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å
    try:
        sent_message = bot.send_message(message.chat.id, help_text)
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.pin_chat_message(message.chat.id, sent_message.message_id, disable_notification=True)
        bot.send_message(message.chat.id, "üìå –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(message.chat.id, help_text + "\n\nüí° –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Binance API ---
def check_binance_api():
    import requests
    try:
        url = "https://api.binance.com/api/v3/ping"
        r = requests.get(url, timeout=5)
        if r.status_code == 200:
            return "üü¢ Binance API: **–†–ê–ë–û–¢–ê–ï–¢**"
        else:
            return "üî¥ Binance API: **–û–®–ò–ë–ö–ê**"
    except Exception:
        return "üî¥ Binance API: **–û–®–ò–ë–ö–ê**"

@bot.message_handler(commands=['status'])
def status_command(message):
    user_id = str(message.from_user.id)
    if user_id != ADMIN_ID:
        bot.reply_to(message, "üîí –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥
    scan_status = "üü¢ –ê–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥: **–ê–ö–¢–ò–í–ï–ù** (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫)" if scheduler.get_job('auto_scalping_scan') else "‚ö™ –ê–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥: **–í–´–ö–õ–Æ–ß–ï–ù**"
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    global data_source
    source_status = f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: **{data_source.upper()}**"
    
    # Binance API —Å—Ç–∞—Ç—É—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ Binance)
    if data_source.lower() == "binance":
        api_status = check_binance_api()
    else:
        # –î–ª—è CoinGecko –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ get_coin_data
        try:
            test_data = get_coin_data("BTC", "1h", 1)
            if test_data is not None:
                api_status = f"üü¢ {data_source.title()} API: **–†–ê–ë–û–¢–ê–ï–¢**"
            else:
                api_status = f"üî¥ {data_source.title()} API: **–û–®–ò–ë–ö–ê**"
        except:
            api_status = f"üî¥ {data_source.title()} API: **–ù–ï–î–û–°–¢–£–ü–ï–ù**"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini AI
    try:
        response = gemini_client.models.generate_content(
            model="gemini-2.0-flash",
            contents="test"
        )
        if response:
            gemini_status = "üü¢ Gemini AI: **–†–ê–ë–û–¢–ê–ï–¢**"
        else:
            gemini_status = "üî¥ Gemini AI: **–û–®–ò–ë–ö–ê**"
    except:
        gemini_status = "üî¥ Gemini AI: **–ù–ï–î–û–°–¢–£–ü–ï–ù**"
    
    # –í—Ä–µ–º—è –ø–æ –ö–∏–µ–≤—É
    from pytz import timezone
    kyiv_time = datetime.now(timezone("Europe/Kiev"))
    time_status = f"‚è∞ **–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** {kyiv_time.strftime('%H:%M:%S')}"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    status_text = f"""üîß **–°–¢–ê–¢–£–° –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê**

{scan_status}
{source_status}
{api_status}
{gemini_status}

{time_status}
ü§ñ **–í–µ—Ä—Å–∏—è:** Multi-Timeframe Analysis v3.0
"""
    bot.send_message(message.chat.id, status_text, parse_mode="Markdown")
@bot.message_handler(commands=['source', '–∏—Å—Ç–æ—á–Ω–∏–∫'])
def switch_data_source(message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    notify_admin_about_user_request(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name, 
        "–ö–æ–º–∞–Ω–¥–∞ /source", 
        "/source"
    )
    
    global data_source
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    if data_source == "binance":
        data_source = "coingecko"
        source_info = """üîÑ **–ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–• –ò–ó–ú–ï–ù–Å–ù**

üìä **–ê–∫—Ç–∏–≤–µ–Ω: CoinGecko API** (—Å –∞–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ Binance)

‚úÖ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ CoinGecko:**
‚Ä¢ 18,000+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (vs 1,000+ Binance)
‚Ä¢ –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏ DEX –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫ Binance –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞ - –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ Binance
‚Ä¢ –ú–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ (–∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è)

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** Binance –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
üí° –ò—Å–ø–æ–ª—å–∑—É–π `/trending` –¥–ª—è –¢–û–ü —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç"""
        
    else:
        data_source = "binance"
        source_info = """üîÑ **–ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–• –ò–ó–ú–ï–ù–Å–ù**

üìä **–ê–∫—Ç–∏–≤–µ–Ω: Binance API** (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

‚úÖ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Binance:**
‚Ä¢ –¢–æ—á–Ω—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π  
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤
‚Ä¢ 99.9% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –¢–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ Binance (~1000 –ø–∞—Ä)
‚Ä¢ –ù–µ—Ç DEX –º–æ–Ω–µ—Ç –∏ –Ω–æ–≤—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤

üí° **–ò—Å–ø–æ–ª—å–∑—É–π:** `/scan` –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥–∞, `/trending` –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç"""
    
    bot.send_message(message.chat.id, source_info)

@bot.message_handler(commands=['trending', '—Ç—Ä–µ–Ω–¥—ã'])
def get_trending_coins(message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–µ–Ω–¥–æ–≤
    notify_admin_about_user_request(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name, 
        "–ö–æ–º–∞–Ω–¥–∞ /trending", 
        "/trending"
    )
    
    bot.reply_to(message, "üî• –ò—â—É —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ CoinGecko...")
    
    try:
        trending = get_trending_coins_coingecko()
        
        if trending:
            trend_text = "üî• **–¢–û–ü –¢–†–ï–ù–î–û–í–´–ï –ú–û–ù–ï–¢–´ (CoinGecko)**\n\n"
            
            for i, coin in enumerate(trending, 1):
                trend_text += f"{i}. **{coin['symbol']}** ({coin['name']})\n"
                trend_text += f"   ‚îî –¢—Ä–µ–Ω–¥–æ–≤—ã–π —Å–∫–æ—Ä: {coin['score']}/100\n\n"
            
            trend_text += "üí° **–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã –Ω–∞–ø–∏—à–∏:**\n"
            trend_text += "‚Ä¢ `[–°–ò–ú–í–û–õ] [–¢–ê–ô–ú–§–†–ï–ô–ú]` (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC 4h)\n"
            trend_text += "‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ CoinGecko: `/source`"
            
            bot.send_message(message.chat.id, trend_text)
            
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        bot.reply_to(message, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")


@bot.message_handler(commands=['scan'])
def handle_scan_command(message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ —Å–∫–∞–Ω–∞
    notify_admin_about_user_request(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name, 
        "–ö–æ–º–∞–Ω–¥–∞ /scan", 
        "/scan"
    )
    
    try:
        bot.reply_to(message, "üîÑ –°–∫–∞–Ω–∏—Ä—É—é –≤–µ—Å—å –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö –ª—É—á—à–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        top_coins = screen_best_coins_for_scalping()
        
        if not top_coins:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ë–µ—Ä–µ–º –¢–û–ü-3 –ª—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã
        top_3_coins = top_coins[:3]
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å RSI –∏ SMA –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        coins_data = []
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for i, coin in enumerate(top_3_coins):
            symbol = coin['symbol']
            signal = generate_scalping_signal(coin)
            
            if not signal:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º klines –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI –∏ SMA
            klines_data = get_binance_klines(symbol, "5m", 50)
            
            rsi = 50  # –î–µ—Ñ–æ–ª—Ç
            sma_20 = signal['current_price']  # –î–µ—Ñ–æ–ª—Ç
            
            if klines_data and len(klines_data) >= 20:
                closes = [k['close'] for k in klines_data]
                
                # –†–∞—Å—á–µ—Ç RSI
                def calc_rsi(prices, period=14):
                    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
                    gains = [d if d > 0 else 0 for d in deltas]
                    losses = [-d if d < 0 else 0 for d in deltas]
                    
                    avg_gain = sum(gains[:period]) / period
                    avg_loss = sum(losses[:period]) / period
                    
                    if avg_loss == 0:
                        return 100
                    
                    rs = avg_gain / avg_loss
                    return 100 - (100 / (1 + rs))
                
                rsi = calc_rsi(closes)
                sma_20 = sum(closes[-20:]) / 20 if len(closes) >= 20 else closes[-1]
            
            # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã RSI
            rsi_indicator = ""
            if rsi < 30:
                rsi_indicator = "üü¢"  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            elif rsi > 70:
                rsi_indicator = "üî¥"  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            
            # –≠–º–æ–¥–∑–∏ —Å–∏–≥–Ω–∞–ª–∞
            signal_emoji = "üü¢" if "LONG" in signal['signal_type'] else "üî¥"
            
            coins_data.append({
                'priority': medals[i],
                'symbol': signal['symbol'],
                'price': f"{signal['current_price']:.4f}" if signal['current_price'] < 1 else f"{signal['current_price']:.2f}",
                'signal_emoji': signal_emoji,
                'signal_type': signal['signal_type'],
                'rsi': f"{rsi:.0f} | {rsi_indicator}" if rsi_indicator else f"{rsi:.0f}",
                'sma_20': f"{sma_20:.4f}" if sma_20 < 1 else f"{sma_20:.2f}",
                'volume_24h': signal['volume_24h'],
                'rrr': signal['rrr'],
                'entry': f"{signal['entry']:.4f}" if signal['entry'] < 1 else f"{signal['entry']:.2f}",
                'stop_loss': f"{signal['stop_loss']:.4f}" if signal['stop_loss'] < 1 else f"{signal['stop_loss']:.2f}",
                'take_profit_1': f"{signal['take_profit_1']:.4f}" if signal['take_profit_1'] < 1 else f"{signal['take_profit_1']:.2f}",
                'star': '',
                'rsi_raw': rsi,
                'volume_raw': float(coin.get('quoteVolume', 0))
            })
        
               # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –º–æ–Ω–µ—Ç—É
        best_coin = None
        for coin in coins_data:
            if (coin['rsi_raw'] < 30 or coin['rsi_raw'] > 70) and coin['volume_raw'] > 10000000:
                coin['star'] = ' ‚≠ê'
                best_coin = coin['symbol']
                break

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not best_coin and coins_data:
            coins_data[0]['star'] = ' ‚≠ê'
            best_coin = coins_data[0]['symbol']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ª—É—á—à–µ–π —Å–¥–µ–ª–∫–∏
        if best_coin:
            response_text += f"üî• –õ–£–ß–®–ê–Ø –°–î–ï–õ–ö–ê: {best_coin} ‚≠ê\n\n"
        
        response_text += "üéØ **–¢–û–ü-3 –õ–£–ß–®–ò–ï –ú–û–ù–ï–¢–´ –î–õ–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì–ê –°–ï–ô–ß–ê–°:**\n\n"
        
        # –¢–∞–±–ª–∏—Ü–∞ Markdown
        response_text += "| –†–∞–Ω–≥ | –ú–æ–Ω–µ—Ç–∞ | –¶–µ–Ω–∞ | –°–∏–≥–Ω–∞–ª | RSI | SMA20 | –û–±—ä—ë–º | RRR |\n"
        response_text += "|------|--------|------|--------|-----|-------|-------|-----|\n"
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for coin in coins_data:
            response_text += f"| {coin['priority']}{coin['star']} | {coin['symbol']} | ${coin['price']} | {coin['signal_emoji']} | {coin['rsi']} | ${coin['sma_20']} | {coin['volume_24h']}M | {coin['rrr']} |\n"
        
        response_text += "\n**üìä –î–ï–¢–ê–õ–ò –¢–û–†–ì–û–í–´–• –£–†–û–í–ù–ï–ô:**\n\n"
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ
        for coin in coins_data:
            response_text += f"{coin['priority']}{coin['star']} **{coin['symbol']}** {coin['signal_type']}\n"
            response_text += f"üéØ –í—Ö–æ–¥: ${coin['entry']} | üõë –°—Ç–æ–ø: ${coin['stop_loss']} | ü•á –¶–µ–ª—å: ${coin['take_profit_1']}\n\n"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Gemini —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        tech_symbols = [c['symbol'] for c in coins_data]
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–ü-3 –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞—Å—Å—Ç–∞–≤—å –∏—Ö –ø–æ –º–µ—Å—Ç–∞–º:

–î–ê–ù–ù–´–ï:
"""
        for coin in coins_data:
            prompt += f"- {coin['symbol']}: RSI={coin['rsi_raw']:.0f}, SMA20=${coin['sma_20']}, –û–±—ä—ë–º={coin['volume_24h']}M, RRR={coin['rrr']}\n"
        
        prompt += f"""
–ó–ê–î–ê–ù–ò–ï:
1. –†–∞—Å—Å—Ç–∞–≤—å –º–æ–Ω–µ—Ç—ã ü•áü•àü•â –ø–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
2. –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (1 —Å—Ç—Ä–æ–∫–∞)

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ):
ü•á [–°–ò–ú–í–û–õ] - [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]
ü•à [–°–ò–ú–í–û–õ] - [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]
ü•â [–°–ò–ú–í–û–õ] - [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI –ø—Ä–æ–º–ø—Ç:\n{prompt}")

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        def try_gemini_analysis_scan(prompt, max_retries=3):
            models_to_try = ["gemini-2.0-flash-exp", "gemini-1.5-flash", "gemini-1.5-pro"]
            delays = [2, 5, 9]
            
            for model in models_to_try:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model}")
                for attempt in range(max_retries):
                    try:
                        response = gemini_client.models.generate_content(
                            model=model,
                            contents=prompt
                        )
                        print(f"‚úÖ Gemini —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª (–º–æ–¥–µ–ª—å: {model}, –ø–æ–ø—ã—Ç–∫–∞: {attempt + 1})")
                        return response
                    except Exception as e:
                        error_msg = str(e)
                        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini [–º–æ–¥–µ–ª—å: {model}, –ø–æ–ø—ã—Ç–∫–∞: {attempt + 1}/{max_retries}]: {error_msg}")
                        
                        if "503" in error_msg or "unavailable" in error_msg.lower() or "overloaded" in error_msg.lower():
                            if attempt < max_retries - 1:
                                delay = delays[attempt]
                                print(f"‚è∞ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                                time.sleep(delay)
                        else:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–æ–π, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å")
                            break
            
            print("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return None
        
        gemini_response = try_gemini_analysis_scan(prompt)
        ai_analysis = gemini_response.text if gemini_response and gemini_response.text else "AI –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –î–æ–±–∞–≤–ª—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        response_text += f"ü§ñ **GEMINI –ê–ù–ê–õ–ò–ó:**\n{ai_analysis}\n\n"
        
        # –ë–ª–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏ Gemini –≤—ã–±–æ—Ä–∞
        tech_top = coins_data[0]['symbol'] if coins_data else ""
        gemini_top = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±–æ—Ä Gemini (–∏—â–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ ü•á)
        import re
        gemini_match = re.search(r'ü•á\s*([A-Z]+)', ai_analysis)
        if gemini_match:
            gemini_top = gemini_match.group(1)
        
        comparison_emoji = "üü¢" if tech_top == gemini_top else "üî¥"
        
        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è/—Ä–∞–∑–ª–∏—á–∏—è
        if tech_top == gemini_top:
            explanation = "–û–±–∞ –º–µ—Ç–æ–¥–∞ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É ‚Äî —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
        else:
            explanation = "–†–∞–∑–ª–∏—á–∏–µ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"
        
        response_text += f"**üìä –°–†–ê–í–ù–ï–ù–ò–ï –í–´–ë–û–†–û–í:**\n"
        response_text += f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {tech_top}\n"
        response_text += f"‚Ä¢ Gemini –≤—ã–±–æ—Ä: {gemini_top if gemini_top else 'N/A'}\n"
        response_text += f"‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {comparison_emoji} {'–î–∞' if tech_top == gemini_top else '–ù–µ—Ç'}\n"
        response_text += f"‚Ä¢ {explanation}\n\n"
        
        # –í—Ä–µ–º—è –ø–æ –ö–∏–µ–≤—É
        from pytz import timezone
        kyiv_time = datetime.now(timezone("Europe/Kiev"))
        response_text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {kyiv_time.strftime('%H:%M:%S')}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram
        max_length = 4000
        if len(response_text) > max_length:
            response_text = response_text[:max_length] + "..."
        
        bot.reply_to(message, response_text, parse_mode='Markdown')
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞: {e}")
        bot.reply_to(message, f"‚ö† –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞: {e}")

@bot.message_handler(commands=['start_scan'])
def handle_start_scan_command(message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Å–∫—Ä–∏–Ω–∏–Ω–≥–∞
    notify_admin_about_user_request(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name, 
        "–ö–æ–º–∞–Ω–¥–∞ /start_scan", 
        "/start_scan"
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–Ω–∏–Ω–≥
        job = scheduler.get_job('auto_scalping_scan')
        if job:
            bot.reply_to(message, "‚úÖ **–ê–í–¢–û–°–ö–†–ò–ù–ò–ù–ì –£–ñ–ï –†–ê–ë–û–¢–ê–ï–¢!**\n\n‚ö° –°–∏–≥–Ω–∞–ª—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥\nüîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –¢–û–ü –º–æ–Ω–µ—Ç—ã –ø–æ –æ–±—ä—ë–º—É\nüìä –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¢–û–ü-3 —Å RRR ‚â• 1.5")
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–Ω–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ
            scheduler.add_job(
                func=auto_send_scalping_signals,
                trigger="interval",
                seconds=60,
                id='auto_scalping_scan'
            )
            bot.reply_to(message, "üöÄ **–ê–í–¢–û–°–ö–†–ò–ù–ò–ù–ì –ó–ê–ü–£–©–ï–ù!**\n\n‚ö° –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∞–µ—à—å:\nüéØ –¢–û–ü-3 –º–æ–Ω–µ—Ç—ã —Å RRR ‚â• 1.5\nüìä RSI, SMA, –æ–±—ä—ë–º—ã –∏ RRR –∞–Ω–∞–ª–∏–∑\nü§ñ Gemini –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n‚úÖ –ü–µ—Ä–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏–¥—É—Ç —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

@bot.message_handler(commands=['stop_scan'])
def handle_stop_scan_command(message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞
    notify_admin_about_user_request(
        message.from_user.id, 
        message.from_user.username, 
        message.from_user.first_name, 
        "–ö–æ–º–∞–Ω–¥–∞ /stop_scan", 
        "/stop_scan"
    )
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω–∏–Ω–≥
        job = scheduler.get_job('auto_scalping_scan')
        if job:
            scheduler.remove_job('auto_scalping_scan')
            bot.reply_to(message, "‚èπÔ∏è **–ê–í–¢–û–°–ö–†–ò–ù–ò–ù–ì –û–°–¢–ê–ù–û–í–õ–ï–ù**\n\nüì¥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç\nüîÑ –ú–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start_scan\nüí° –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π /scan")
        else:
            bot.reply_to(message, "‚ö†Ô∏è **–ê–í–¢–û–°–ö–†–ò–ù–ò–ù–ì –£–ñ–ï –û–°–¢–ê–ù–û–í–õ–ï–ù**\n\nüí° –ó–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /start_scan –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤\nüìä –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /scan –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –∫–∏–¥–∞—Ç—å —Å–≤–æ–∏ –≥—Ä–∞—Ñ–∏–∫–∏) ---
@bot.message_handler(content_types=['text', 'photo', 'document'])
def handle_private_messages(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if message.photo:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
            notify_admin_about_user_request(
                message.from_user.id, 
                message.from_user.username, 
                message.from_user.first_name, 
                "–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞", 
                message.caption or "–§–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
            )
            print("üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_response = requests.get(file_url)
            
            if photo_response.status_code == 200:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Gemini
                caption = message.caption or "–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"
                
                prompt = f"""–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. {caption}

–ê–ù–ê–õ–ò–ó –ì–†–ê–§–ò–ö–ê:
üîç –¢—Ä–µ–Ω–¥: [–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π]
üìä –£—Ä–æ–≤–Ω–∏: [—Ü–∏—Ñ—Ä—ã]
üìà –í—Ö–æ–¥: [—Ç–æ—á–∫–∞] 
üõë –°—Ç–æ–ø: [—É—Ä–æ–≤–µ–Ω—å]
üéØ –¶–µ–ª–∏: [—É—Ä–æ–≤–Ω–∏]
‚öñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫: [1-10]

–§–ê–ö–¢–´ –¢–û–õ–¨–ö–û!"""
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ base64 –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                import base64
                import time
                base64_image = base64.b64encode(photo_response.content).decode('utf-8')
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ API (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ –∫–∞–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
                def try_gemini_analysis_private(prompt, image_data, max_retries=3):
                    models_to_try = ["gemini-2.0-flash", "gemini-2.5-flash", "gemini-2.0-flash-exp"]
                    
                    for model in models_to_try:
                        for attempt in range(max_retries):
                            try:
                                print(f"ü§ñ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —Å –º–æ–¥–µ–ª—å—é {model}")
                                response = gemini_client.models.generate_content(
                                    model=model,
                                    contents=[
                                        {
                                            "parts": [
                                                {"text": prompt},
                                                {
                                                    "inline_data": {
                                                        "mime_type": "image/jpeg",
                                                        "data": image_data
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                )
                                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–æ–¥–µ–ª—å—é {model}")
                                return response
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
                                if "503" in str(e) or "overloaded" in str(e).lower():
                                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ
                                    delay = (2 ** attempt) + 1  # 2, 5, 9 —Å–µ–∫—É–Ω–¥
                                    print(f"‚è∞ –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥...")
                                    time.sleep(delay)
                                else:
                                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
                                    break
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                    return None
                
                response = try_gemini_analysis_private(prompt, base64_image)
                
                if response and response.text:
                    ai_reply = response.text
                    print("‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                else:
                    # –ì—Ä–∞—Ñ–∏–∫ Bitcoin - —É—Ä–æ–≤–Ω–∏ –≤–∏–¥–Ω—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    ai_reply = """‚ö†Ô∏è **–°–ï–†–í–ò–° –í–†–ï–ú–ï–ù–ù–û –ü–ï–†–ï–ì–†–£–ñ–ï–ù**

–í—Å–µ AI –º–æ–¥–µ–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.

üìä **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞:**
ü™ô Bitcoin (BTC/USDT)
üîç –¢—Ä–µ–Ω–¥: –í–æ—Å—Ö–æ–¥—è—â–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π 
üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ~$103,000
üìà –ü–æ–¥–¥–µ—Ä–∂–∫–∞: $100,000
üéØ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: $105,000
‚öñÔ∏è –†–∏—Å–∫: –°—Ä–µ–¥–Ω–∏–π (5/10)

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** 
–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–±–æ—è –∏–ª–∏ –æ—Ç—Å–∫–æ–∫–∞ –æ—Ç –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π.

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞."""
                    print("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)
                max_length = 4000
                if len(ai_reply) > max_length:
                    ai_reply = ai_reply[:max_length] + "..."
                
                bot.reply_to(message, f"üìä AI –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞ (Gemini Vision):\n\n{ai_reply}")
            else:
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        elif message.text or message.caption:
            user_input = message.text or message.caption
            print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {user_input[:200]}...")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ TradingView
            import re
            tradingview_links = re.findall(r'https?://(?:www\.)?tradingview\.com[^\s]*', user_input)
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ TradingView –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {len(tradingview_links)}")
            
            if tradingview_links:
                print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É TradingView –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É TradingView
                for link in tradingview_links:
                    try:
                        symbol, timeframe = parse_tradingview_link(link)
                        if symbol == "SHORT_LINK":
                            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ - –ø—Ä–æ—Å–∏–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                            bot.reply_to(message, """üìé **–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ TradingView –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!**

‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ `/x/`, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.

‚úÖ **–†–µ—à–µ–Ω–∏–µ:**
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ TradingView
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞  
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É

üîó **–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏:**
`https://tradingview.com/chart/?symbol=BINANCE%3ABTCUSDT`

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: `BTC 4h`)""")
                            return
                        elif symbol:
                            print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol} ({timeframe}) –∏–∑ —Å—Å—ã–ª–∫–∏ TradingView –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                            
                            analysis_result = analyze_symbol_from_tradingview(symbol, timeframe, user_input, link)
                            
                            if analysis_result:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏–∫
                                if isinstance(analysis_result, tuple) and len(analysis_result) == 2:
                                    chart_text, chart_buffer = analysis_result
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º
                                    chart_buffer.seek(0)
                                    caption_text = f"üìà **–ê–ù–ê–õ–ò–ó –ü–û –°–°–´–õ–ö–ï TRADINGVIEW**\n\nü™ô {symbol}\n‚è∞ {timeframe}\n\n{chart_text[:600]}..."
                                    bot.send_photo(message.chat.id, chart_buffer, 
                                                 caption=safe_caption(caption_text))
                                else:
                                    # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
                                    reply_message = f"üìà **–ê–ù–ê–õ–ò–ó –ü–û –°–°–´–õ–ö–ï TRADINGVIEW**\n\nü™ô {symbol}\n‚è∞ {timeframe}\n\n{analysis_result}"
                                    if len(reply_message) > 4000:
                                        reply_message = reply_message[:4000] + "..."
                                    bot.reply_to(message, reply_message)
                                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–∫–∏
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–∫–∏ TradingView –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
                        continue
                        
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –Ω–∏ –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É TradingView")
                return
            
            # –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ TradingView - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            print(f"üîç DEBUG: –ù–µ—Ç —Å—Å—ã–ª–æ–∫ TradingView, –ø—Ä–æ–≤–µ—Ä—è—é —Å–∏–º–≤–æ–ª—ã –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...")
            symbol_info = extract_crypto_symbol_and_timeframe(user_input)
            
            if symbol_info:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –∞–Ω–∞–ª–∏–∑–µ –º–æ–Ω–µ—Ç—ã
                symbol, timeframe = symbol_info
                notify_admin_about_user_request(
                    message.from_user.id, 
                    message.from_user.username, 
                    message.from_user.first_name, 
                    f"–ê–Ω–∞–ª–∏–∑ {symbol} {timeframe}", 
                    user_input
                )
                # –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã - —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫!
                source_name = "Binance" if data_source == "binance" else "CoinGecko"
                bot.reply_to(message, f"üìä –°–æ–∑–¥–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}...\n\n‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å {source_name}, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —É—Ä–æ–≤–Ω–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ —Å —Å–µ—Ç–∞–ø–∞–º–∏...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                df = get_coin_data(symbol, interval=timeframe, limit=100)
                
                if df is not None:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
                    levels = calculate_technical_levels(df)
                    
                    if levels:
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                        chart_buffer = create_trading_chart(symbol, df, levels, timeframe)
                        
                        if chart_buffer:
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º
                            analysis_text = generate_chart_analysis(symbol, levels, "", timeframe)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º
                            try:
                                bot.send_photo(
                                    message.chat.id,
                                    chart_buffer.getvalue(),
                                    caption=safe_caption(analysis_text),
                                    parse_mode='Markdown'
                                )
                                chart_buffer.close()
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                                bot.reply_to(message, f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.\n\n{analysis_text}")
                        else:
                            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol} –Ω–∞ {timeframe}")
                    else:
                        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è {symbol} –Ω–∞ {timeframe}")
                else:
                    bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ {timeframe}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º.")
            
            else:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ–±—â–µ–º AI –∞–Ω–∞–ª–∏–∑–µ
                notify_admin_about_user_request(
                    message.from_user.id, 
                    message.from_user.username, 
                    message.from_user.first_name, 
                    "–û–±—â–∏–π AI –∞–Ω–∞–ª–∏–∑", 
                    user_input
                )
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI
                prompt = f"""–ó–∞–ø—Ä–æ—Å: {user_input}

–ê–ù–ê–õ–ò–ó:
üìä {user_input}: [–æ—Ü–µ–Ω–∫–∞]
üìà –í—Ö–æ–¥: [—É—Ä–æ–≤–Ω–∏]
üõë –°—Ç–æ–ø: [—É—Ä–æ–≤–µ–Ω—å] 
üéØ –¶–µ–ª–∏: [—É—Ä–æ–≤–Ω–∏]
‚öñÔ∏è –†–∏—Å–∫: [1-10]

–§–ê–ö–¢–´ –¢–û–õ–¨–ö–û!"""
                
                response = gemini_client.models.generate_content(
                    model="gemini-2.0-flash",
                    contents=prompt
                )
                
                ai_reply = response.text if response.text else "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)
                max_length = 4000
                if len(ai_reply) > max_length:
                    ai_reply = ai_reply[:max_length] + "..."
                
                bot.reply_to(message, f"üìà AI –ê–Ω–∞–ª–∏–∑ (Gemini):\n{ai_reply}")
        else:
            bot.reply_to(message, "üìä –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        bot.reply_to(message, f"‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def extract_crypto_symbol_and_timeframe(text):
    """–ò–∑–≤–ª–µ—á—å —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        import re
        original_text = text.strip()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        text = text.upper().strip()  # –î–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –º–æ–Ω–µ—Ç—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
        crypto_symbols = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
            'BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOGE', 'DOT', 'AVAX',
            'LINK', 'LTC', 'UNI', 'ALGO', 'VET', 'ICP', 'FIL', 'TRX', 'ETC',
            'ATOM', 'XLM', 'THETA', 'AAVE', 'SUSHI', 'COMP', 'MKR', 'YFI',
            'NEAR', 'LUNA', 'FTT', 'CRV', 'SNX', '1INCH', 'ENJ', 'MANA',
            'SAND', 'AXS', 'GALA', 'CHZ', 'BAT', 'ZIL', 'HOT', 'HBAR',
            'OPEN', 'PENGU', 'PEPE', 'SHIB', 'THE', 'SUI', 'WLFI', 'MEME',
            'BONK', 'FLOKI', 'WIF', 'BOME', 'NEIRO', 'DOGS', 'HMSTR', 'CATI', 'NOT', 'TON',
            # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            'ETHFI', 'ORDI', 'PEOPLE', 'DYDX', 'CELO', 'STRK', 'AI', 'POL', 'IOTX', 'CAKE', 'LUNC', 'BAKE', 'OP',
            # –ù–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            'PUMP', 'TAO', 'ENS', 'ENA', 'S', 'INJ', 'W', 'ADX', 'ROSE', 'USTC', 'SEI', 'FIDA', 'PNUT',
            'JASMY', 'TURBO', 'EIGEN', 'SCR', 'IO', 'TRB', 'APT', 'LDO', 'ALT', 'WLD', 'BCH', 'AEVO',
            'ARB', 'ZRX', 'ANKR', 'YGG', 'XAI', 'ILV', 'SCRT', 'EGLD', 'JUP', 'FET', 'GRT', 'PIXEL',
            'IDEX', 'DASH', 'PORTAL', 'PROM', 'VTHO', 'C98', 'VANRY', 'TIA', 'TRUMP', 'ID', 'JTO',
            'HOOK', 'MASK', 'PERP', 'FXS', 'MAV', 'SLP', 'RVN', 'CFX', 'MANTA', 'IP'
        ]
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ Binance
        valid_timeframes = [
            '1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '8h', '12h', '1d', '3d', '1w', '1M'
        ]
        
        # –ò—â–µ–º —Å–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ç–µ–∫—Å—Ç–µ
        found_symbol = None
        found_timeframe = '1h'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
          # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø–æ –¥–ª–∏–Ω–µ, —á—Ç–æ–±—ã –¥–ª–∏–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä ETHFI) –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å —Ä–∞–Ω—å—à–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö (ETH)
        sorted_symbols = sorted(crypto_symbols, key=len, reverse=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for symbol in sorted_symbols:
            if re.search(r'\b' + re.escape(symbol) + r'\b', text):
                found_symbol = symbol
                break

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å USDT
        if not found_symbol:
            for symbol in sorted_symbols:
                if f"{symbol}USDT" in text:
                    found_symbol = symbol
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if not found_symbol:
            keyword_map = {
                'BITCOIN': 'BTC',
                'ETHEREUM': 'ETH', 
                'BINANCE': 'BNB',
                'CARDANO': 'ADA',
                'SOLANA': 'SOL',
                'RIPPLE': 'XRP',
                'DOGECOIN': 'DOGE',
                'POLKADOT': 'DOT',
                'AVALANCHE': 'AVAX',
                'CHAINLINK': 'LINK',
                'LITECOIN': 'LTC',
                'UNISWAP': 'UNI'
            }
            
            for keyword, symbol in keyword_map.items():
                if keyword in text:
                    found_symbol = symbol
                    break
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ (1M vs 1m)
        for tf in valid_timeframes:
            pattern = r'\b' + re.escape(tf) + r'\b'
            if re.search(pattern, original_text):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
                found_timeframe = tf
                break
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–π)
        if found_timeframe == '1h':  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            timeframe_aliases = {
                'MIN': '1m',
                '1MIN': '1m',
                '1min': '1m',
                '3MIN': '3m',
                '3min': '3m',
                '5MIN': '5m',
                '5min': '5m',
                '15MIN': '15m',
                '15min': '15m',
                '30MIN': '30m',
                '30min': '30m',
                'HOUR': '1h',
                'HOURLY': '1h',
                'hour': '1h',
                'hourly': '1h',
                'DAILY': '1d',
                'daily': '1d',
                'DAY': '1d',
                'day': '1d',
                'WEEK': '1w',
                'week': '1w',
                'WEEKLY': '1w',
                'weekly': '1w',
                'MONTH': '1M',
                'month': '1M',
                'MONTHLY': '1M',
                'monthly': '1M'
            }
            
            # –ò—â–µ–º –∞–ª–∏–∞—Å—ã (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤
            text_words = text.split()
            
            for alias, tf in timeframe_aliases.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                if alias in text_words:
                    found_timeframe = tf
                    break
                # –ò–ª–∏ –∫–∞–∫ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä XRP15MIN)
                pattern = r'\b' + re.escape(alias) + r'\b'
                if re.search(pattern, text, re.IGNORECASE):
                    found_timeframe = tf
                    break
        if found_symbol:
            return (found_symbol, found_timeframe)
        
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {e}")
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {e}")
        return None


# --- –ê–≤—Ç–æ–ø—É—à –ø—Ä–æ–µ–∫—Ç–∞ –≤ GitHub ---
def auto_push():
    import os
    try:
        print("üîÑ –ê–≤—Ç–æ–ø—É—à –≤ GitHub...")
        os.system("git add .")
        os.system('git commit -m "–ê–≤—Ç–æ–ø—É—à –∏–∑ Replit"')
        os.system("git push origin main")
        print("‚úÖ –ê–≤—Ç–æ–ø—É—à –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É—à–∞: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø—É—à–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
scheduler.add_job(auto_push, 'interval', hours=1, id='auto_git_push')


if __name__ == '__main__':
    print("‚úÖ –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é webhook...")
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/[–¢–û–ö–ï–ù_–°–ö–†–´–¢]")
    app.run(host='0.0.0.0', port=5000)